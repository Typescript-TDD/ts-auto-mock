{"version":3,"sources":["webpack:///../src/views/types-supported.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"yeAMO,IAAMA,EAAe,Q,+MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,mBADR,mBAGA,qIACA,iBAAQ,CACN,GAAM,aADR,aAGA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,gJAWL,iBAAQ,CACN,GAAM,cADR,cAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,+FAaL,iBAAQ,CACN,GAAM,mCADR,mCAGA,uEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,4IAYL,iBAAQ,CACN,GAAM,wCADR,wCAGA,4EACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,kTAoBL,iBAAQ,CACN,GAAM,WADR,WAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,0FAYL,iBAAQ,CACN,GAAM,WADR,WAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,kHAaL,iBAAQ,CACN,GAAM,WADR,WAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,iIAaL,iBAAQ,CACN,GAAM,uCADR,yCAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,0IAgBL,iBAAQ,CACN,GAAM,YADR,YAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,iEAKL,iBAAQ,CACN,GAAM,UADR,UAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,mEAKL,iBAAQ,CACN,GAAM,UADR,UAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,oIAOL,iBAAQ,CACN,GAAM,gBADR,gBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,qJASL,iBAAQ,CACN,GAAM,YADR,YAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,+GAQL,iBAAQ,CACN,GAAM,yCADR,+CAGA,sGACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,4PAUL,iBAAQ,CACN,GAAM,SADR,SAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,mHASL,iBAAQ,CACN,GAAM,2CADR,6CAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,kHASL,iBAAQ,CACN,GAAM,cADR,cAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,sHASL,iBAAQ,CACN,GAAM,WADR,WAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,iKAYL,iBAAQ,CACN,GAAM,YADR,YAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,6HASL,iBAAQ,CACN,GAAM,gBADR,gBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,+PAiBL,iBAAQ,CACN,GAAM,mBADR,mBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,6IAUL,iBAAQ,CACN,GAAM,aADR,aAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,6WAwBL,iBAAQ,CACN,GAAM,qBADR,qBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,4I,sMAcTJ,EAAWK,gBAAiB","file":"component---src-views-types-supported-mdx-412ef1cff7f00d22c96f.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/ts-auto-mock/ts-auto-mock/ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"types-supported\"\n    }}>{`Types supported`}</h1>\n    <p>{`The library tries to convert the type argument passed to createMock so you don't have to mock them manually.`}</p>\n    <h2 {...{\n      \"id\": \"primitive\"\n    }}>{`Primitive`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`number // 0\nstring // \"\"\nboolean // false\nboolean[] // []\nvoid // undefined\nnull // null\nundefined // undefined\nnever // undefined\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"interfaces\"\n    }}>{`Interfaces`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface Person {\n  id: string\n  name: string\n}\n/*\n{\n  id: \"\",\n  name: \"\"\n}\n*/\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"interfaces-with-call-signatures\"\n    }}>{`Interfaces with call signatures`}</h2>\n    <p>{`For overload methods it will use the first one`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface Person {\n  (): number\n  (): string\n  name: string\n}\n\nconst mock = createMock<Person>();\nmock() // 0\nmock.name // \"\"\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"interfaces-with-construct-signatures\"\n    }}>{`Interfaces with construct signatures`}</h2>\n    <p>{`For overload constructors it will use the first one`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface PersonWithHat {\n  hatSize: number;\n}\n\ninterface PersonWithoutHat {\n  shirtSize: number;\n}\n\ninterface Person {\n  new (hatSize: number): PersonWithHat\n  new (): PersonWithoutHat\n  name: string\n}\n\nconst mock = createMock<Person>();\nnew mock() // { hatSize: 0 }\nmock.name // \"\"\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"classes\"\n    }}>{`Classes`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`class Person {\n  private _id: string;\n  name: string\n}\n/*\n{\n  name: \"\"\n}\n*/\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"methods\"\n    }}>{`Methods`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface InterfaceWithMethod {\n  method(): string\n}\n/*\n{\n  method: () => {\n    return \"\"\n  }\n}\n*/\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"literal\"\n    }}>{`Literal`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`type Data = {\n  id: \"I am a specific string\",\n  number: 2\n}\n/*\n{\n  id: \"I am a specific string\",\n  number: 2\n}\n/*\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"enum-it-will-select-the-first-value\"\n    }}>{`Enum (it will select the first value)`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`enum Direction {\n  LEFT,\n  RIGHT\n}\n\ninterface WithEnum {\n  direction: Direction\n}\n/*\n{\n  direction: DIRECTION.LEFT\n}\n/*\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"function\"\n    }}>{`Function`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const mock = createMock<() => string>();\nmock // () => \"\"\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"object\"\n    }}>{`Object`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const mock = createMock<{ a: string }>();\nmock // { a: \"\" }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"key-in\"\n    }}>{`Key in`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`type Keys = \"a\" | \"b\";\ntype myType = { [key in Keys]: string }\nconst mock = createMock<myType>();\nmock // { a: \"\", b: \"\" }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"key-in-keyof\"\n    }}>{`Key in keyof`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`type Keys = {\n    a: number;\n}\ntype keyInKeyof = { [key in keyof Keys]: string }\nconst mock = createMock<keyInKeyof>();\nmock // { a: \"\" }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"optional\"\n    }}>{`Optional`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`class MyClass {\n    test?: string;\n}\nconst mock = createMock<MyClass>();\nmock // { test: undefined }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"typescript-libraries-array-number-ecc\"\n    }}>{`Typescript libraries (Array, Number... ecc)`}</h2>\n    <p>{`This is a special case. The library tries to convert to the most useful type.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`class MyClass {\n  array: Array<number>; // []\n  number: Number; // 0\n  promise: Promise<string>; // a promise that will resolve an empty string Promise.resolve(\"\")\n  map: Map<string, string>; // new Map()\n  set: Set<string>; // new Set()\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"tuple\"\n    }}>{`Tuple`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`class MyClass {\n  tuple: [string, number];\n}\n\nconst mock = createMock<MyClass>();\nmock // { tuple: [] }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"union-it-will-convert-to-the-first-type\"\n    }}>{`Union (it will convert to the first type)`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`class MyClass {\n  union: string | number;\n}\n\nconst mock = createMock<MyClass>();\nmock // { union: \"\" }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"dictionary\"\n    }}>{`Dictionary`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`type Dictionary<T> = {\n  [key: string]: T;\n}\n\nconst mock = createMock<Dictionary<Interface>>();\nmock // {}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"extends\"\n    }}>{`Extends`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface Keys {\n  a: string;\n}\ninterface Interface extends Keys {\n  b: boolean;\n}\n\nconst mock = createMock<Interface>();\nmock // { a: \"\", b: \"\" }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"generics\"\n    }}>{`Generics`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface WithGeneric<T>{\n  generic: T\n}\n\nconst mock = createMock<WithGeneric<string>>();\nmock // { generic: \"\" }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"intersection\"\n    }}>{`Intersection`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface IntersectionA {\n  a: string;\n}\n\ninterface IntersectionB {\n  b: number;\n}\n\ninterface Interface {\n  intersection: IntersectionA & IntersectionB,\n}\n\nconst mock = createMock<Interface>();\nmock // { intersection: { a: \"\", b: 0 } }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"constructortype\"\n    }}>{`ConstructorType`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface Test {\n  a: string;\n}\nconst mockType = createMock<new () => Test>();\nconst mock = new mockType();\n\nmock = // { a: \"\" }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"typequery\"\n    }}>{`TypeQuery`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`enum AnEnum {\n  a,\n  b = 'something',\n}\n\nconst mock = createMock<typeof AnEnum>();\nmock.a // 0\nmock.b // 'something'\nmock[0] // 'a'\n\nclass AClass {\n  a: string\n}\n\nconst mockClass = createMock<typeof AClass>();\nnew mockClass().a // ''\n\nfunction AFunction(): number;\n\nconst mockFunction = createMock<typeof AFunction>();\nmockFunction() // 0\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"indexedaccesstype\"\n    }}>{`IndexedAccessType`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`class Class {\n  a: string\n}\n\ntype KeyOf = { [key in keyof Class]: Class[key] };\nconst mock = createMock<KeyOf>();\nmock.a // ''\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}