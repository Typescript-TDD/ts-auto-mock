{"version":3,"sources":["webpack:///../src/views/config.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-views-config-md-0b8262074a6a06c7c023.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/ts-auto-mock/ts-auto-mock/ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"config\"\n    }}>{`Config`}</h1>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface TsAutoMockOptions {\n    debug: boolean | 'file' | 'console';\n    cacheBetweenTests: boolean;\n    features: TsAutoMockFeaturesOption[];\n}\n\nexport type TsAutoMockFeaturesOption = 'random';\n\n`}</code></pre>\n    <p>{`options:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Value`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Default`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`debug`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`false`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`it will NOT log to the console`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`true`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`it will log to the console`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`file`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`it will log to a file (tsAutoMock.log)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`console`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`alias for `}<inlineCode parentName=\"td\">{`true`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`cacheBetweenTests`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`true`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`it will reuse mocks between different tests`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`true`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`false`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`it create new mocks for each different tests`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`features`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`feature[]`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`it will enable a specific feature`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`[]`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`files`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string or string[]`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`it will include only the files matched`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"*`}<em parentName=\"td\">{`/`}</em>{`\"`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <hr></hr>\n    <p>{`There are different ways to pass options to a transformer, every installation type has its own way, to know how to do it\nfind your configuration in the `}<a parentName=\"p\" {...{\n        \"href\": \"./installation\"\n      }}>{`Installation page`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"debug\"\n    }}>{`Debug`}</h2>\n    <p>{`We currently support:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Logs for `}<a parentName=\"li\" {...{\n          \"href\": \"./types-not-supported\"\n        }}>{`not supported types`}</a></li>\n    </ul>\n    <p>{`It will log any not supported type automatically converted to null.\nThis is useful to report an issue or to investigate a potential bug.`}</p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"cachebetweentests\"\n    }}>{`CacheBetweenTests`}</h2>\n    <p>{`One of the main functionality of ts auto mock is to generate mocks and cache them.`}</p>\n    <p>{`Mocks are currently created in the test file making tests to depend to each other.`}</p>\n    <p>{`Example:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`test1.test.ts has a createMock of Interface.`}</li>\n      <li parentName=\"ul\">{`test2.test.ts has a createMock of Interface.`}</li>\n      <li parentName=\"ul\">{`test1.test.ts will have the registration of Interface mock`}</li>\n      <li parentName=\"ul\">{`test2.test.ts will have a registration import.`}</li>\n    </ul>\n    <p>{`If test2 run in a different context than test1 it will not be able to access to the same mock.`}</p>\n    <p>{`Set this property to false when your test run in different context.`}</p>\n    <p>{`We are working on an `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Typescript-TDD/ts-auto-mock/issues/101\"\n      }}>{`issue`}</a>{` to make sure tests do not depend to each other but they will still take advance of a cache system`}</p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"features\"\n    }}>{`Features`}</h2>\n    <p>{`We currently support the following features`}</p>\n    <h3 {...{\n      \"id\": \"random-random\"\n    }}>{`Random ('random')`}</h3>\n    <p>{`When adding random to the feature list any string, boolean and number will be transformed to a random values`}</p>\n    <h4 {...{\n      \"id\": \"string\"\n    }}>{`String`}</h4>\n    <p>{`Example`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface WithString {\n    prop: string;\n}\n\ncreateMock<WithString>() // { prop: 'propQsdeos'}\n`}</code></pre>\n    <p>{`The name of the property will be prepended following 6 random character`}</p>\n    <h3 {...{\n      \"id\": \"number\"\n    }}>{`Number`}</h3>\n    <p>{`Example`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface WithNumber {\n    prop: number;\n}\n\ncreateMock<WithNumber>() // { prop: 5000.213123}\n`}</code></pre>\n    <p>{`A random number will be generated between -10000 and 10000`}</p>\n    <h3 {...{\n      \"id\": \"boolean\"\n    }}>{`Boolean`}</h3>\n    <p>{`Example`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface WithBoolean {\n    prop: boolean;\n}\n\ncreateMock<WithBoolean>() // { prop: true|false}\n`}</code></pre>\n    <p>{`true|false will be random`}</p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"files\"\n    }}>{`Files`}</h2>\n    <p>{`To reduce the compilation time you can tell to the transformer the files that contain `}<inlineCode parentName=\"p\">{`createMock`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`createMockValue`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`registerMock`}</inlineCode>{`,\nall the other files are going to be ignored by the transformer.`}</p>\n    <p>{`The value of this configuration is a `}<inlineCode parentName=\"p\">{`glob`}</inlineCode>{` or array of `}<inlineCode parentName=\"p\">{`glob`}</inlineCode>{`, the same type of matcher present in `}<inlineCode parentName=\"p\">{`tsconfig`}</inlineCode>{` when\ndefining `}<inlineCode parentName=\"p\">{`include`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`exclude`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`files`}</inlineCode>{` properties.`}</p>\n    <p>{`Examples of usage:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`files: \"**/*.spec.ts\"                       \n\n| Structure                                    | Included?\n| -------------------------------------------- | ---------\n| root                                         |\n| └── Projects                                 |\n|     └── SuperProject                         |\n|         ├── tests                            |\n|         │   └── feature1                     |\n|         │       ├── supporting.mock.ts       | No\n|         │       ├── supportingInterface.ts   | No\n|         │       ├── feature1.spec.ts         | Yes\n|         │       └── feature1.spec.ts         | Yes\n|         └── src                              |\n|             └── feature1                     |\n|                 ├── myClass.model.ts         | No\n|                 ├── myClass.api.mock.ts      | No\n|                 ├── model.interface.ts       | No\n|                 └── feature1.component.ts    | No\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`files: [\"**/tests/**/*.spec.ts\", \"**/tests/**/*.mock.ts\"]\n\n| Structure                                    | Included?\n| -------------------------------------------- | ---------\n| root                                         |\n| └── Projects                                 |\n|     └── SuperProject                         |\n|         ├── tests                            |\n|         │   └── feature1                     |\n|         │       ├── supporting.mock.ts       | Yes\n|         │       ├── supportingInterface.ts   | No\n|         │       ├── feature1.spec.ts         | Yes\n|         │       └── feature1.spec.ts         | Yes\n|         └── src                              |\n|             └── feature1                     |\n|                 ├── myClass.model.ts         | No\n|                 ├── myClass.api.mock.ts      | No\n|                 ├── model.interface.ts       | No\n|                 └── feature1.component.ts    | No\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}