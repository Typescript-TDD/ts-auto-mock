{"version":3,"sources":["webpack:///../src/views/create-hydrated-mock.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"2OAMaA,G,UAAe,S,oNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,wBADR,wBAGA,4CAA2B,sBAAQC,WAAW,KAAnB,YAA3B,qDAA6H,uBAA7H,kBACW,sBAAQA,WAAW,KAAnB,sBADX,iGAEA,yGACA,iBAAQ,CACN,GAAM,uBADR,uBAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,uOAcL,iBAAQ,CACN,GAAM,eADR,eAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,oPAYL,uBACA,iBAAQ,CACN,GAAM,sBADR,sBAGA,kIAAiH,uBAAjH,kGAEA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,uOAaL,wG,kNAKJJ,EAAWK,gBAAiB","file":"component---src-views-create-hydrated-mock-mdx-262369e500efe8e834e3.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/ts-auto-mock/ts-auto-mock/ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"create-hydrated-mock\"\n    }}>{`Create hydrated mock`}</h1>\n    <p>{`Do you need to mock `}<strong parentName=\"p\">{`optional`}</strong>{` properties or union types that may be undefined? `}<br />{`\nSay hello to `}<strong parentName=\"p\">{`createHydratedMock`}</strong>{`, it will help you create mocks that will treat optional interfaces as they were not optional`}</p>\n    <p>{`We currently support optional token (?) and union types that contains undefined.`}</p>\n    <h2 {...{\n      \"id\": \"optional-interfaces\"\n    }}>{`Optional interfaces`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createHydratedMock } from 'ts-auto-mock';\n\ninterface Person {\n  id?: string;\n  details?: {\n      phone?: number\n  }\n}\nconst mock = createHydratedMock<Person>();\nmock.id // \"\"\nmock.details // { phone: 0 }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"union-types\"\n    }}>{`Union types`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createHydratedMock } from 'ts-auto-mock';\n\ninterface Person {\n  getName(): string | undefined;\n  getSurname(): undefined | string;\n}\nconst mock = createHydratedMock<Person>();\nmock.getName() // ''\nmock.getSurname() // ''\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"note-from-the-team\"\n    }}>{`Note from the team`}</h2>\n    <p>{`We completely understand the need of this functionality, but we would like the usage to be much simpler.  `}<br />{`\nWe would like to use the existing createMock in combination of typescript Required interface`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createMock } from 'ts-auto-mock';\n\ninterface Person {\n  id?: string;\n}\ntype Required<T> = { // from typescript lib\n    [P in keyof T]-?: T[P];\n};\nconst mock = createMock<Required<Person>>();\nmock.id // \"\"\n`}</code></pre>\n    <p>{`Unfortunately this doesn't work because we don't fully support map types.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}