{"version":3,"sources":["webpack:///../src/views/extension.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"8OAMaA,G,UAAe,S,yMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,aADR,aAGA,kQACA,4GACA,iBAAQ,CACN,GAAM,iBADR,iBAGA,qBAAG,kBAAIC,WAAW,KAAf,+BAAmD,6BAAGA,WAAW,MAAS,CACvE,KAAQ,2DACP,0BAAYA,WAAW,KAAvB,2BACP,wDACA,sBACE,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,6BAAiD,0BAAYA,WAAW,KAAvB,2BAAjD,KACA,iBAAGA,WAAW,MAAd,4CAAgE,0BAAYA,WAAW,KAAvB,kCAAhE,wBACA,iBAAGA,WAAW,MAAd,4PACA,iBAAGA,WAAW,MAAd,sEAA0F,0BAAYA,WAAW,KAAvB,YAA1F,oEAGJ,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,iNAQL,iBAAQ,CACN,MAAS,GAET,kBAAIA,WAAW,MAAf,uCAEF,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,mIAQL,iBAAQ,CACN,GAAM,gBADR,gBAGA,sBACE,kBAAIA,WAAW,MAAf,wBAEF,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8DAML,iBAAQ,CACN,MAAS,GAET,kBAAIA,WAAW,MAAf,kBAEF,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,uDAIL,iBAAQ,CACN,MAAS,GAET,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,gCACA,iBAAGA,WAAW,MAAd,iEACA,kBAAIA,WAAW,MACb,kBAAIA,WAAW,MAAf,sDAA2E,mBAAKA,WAAW,MAAK,gCAAMA,WAAW,OAAU,CACrH,UAAa,gBAD6E,sIAKhG,kBAAIA,WAAW,MAAf,0BAA+C,mBAAKA,WAAW,MAAK,gCAAMA,WAAW,OAAU,CACzF,UAAa,gBADiD,+HAOxE,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,oDAGJ,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,oF,uMASTJ,EAAWK,gBAAiB","file":"component---src-views-extension-mdx-25f8c70220beefcc1a62.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/ts-auto-mock/ts-auto-mock/ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"extension\"\n    }}>{`Extension`}</h1>\n    <p>{`To preserve type safety, we utilize the capability of the type checker to infer types through external interfaces, which enables us to easily inject spies from various testing frameworks without having to perform implicit type casts.`}</p>\n    <p>{`If you need custom spies you can use our framework to wrap- and later extract them.`}</p>\n    <h2 {...{\n      \"id\": \"custom-method\"\n    }}>{`Custom Method`}</h2>\n    <p><em parentName=\"p\">{`This example is taken from: `}<a parentName=\"em\" {...{\n          \"href\": \"https://github.com/Typescript-TDD/jasmine-ts-auto-mock\"\n        }}><inlineCode parentName=\"a\">{`jasmine-ts-auto-mock`}</inlineCode></a></em></p>\n    <p>{`To extend a method you need to:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Create your spy function (`}<inlineCode parentName=\"p\">{`jasmine.createSpy(name)`}</inlineCode>{`)`}</p>\n        <p parentName=\"li\">{`Please note that the value returned from `}<inlineCode parentName=\"p\">{`provideMethodWithDeferredValue`}</inlineCode>{` must be a function.`}</p>\n        <p parentName=\"li\">{`Therefore, you will need to make sure that the method you are providing will not execute the function directly, otherwise it will cause an infinite recursion and crash the application almost immediately, once it exceeds the allowed call stack size.`}</p>\n        <p parentName=\"li\">{`In the example below, the function to be spied upon is passed into `}<inlineCode parentName=\"p\">{`callFake`}</inlineCode>{` which will prevent the function from being executed directly.`}</p>\n      </li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { Provider } from \"ts-auto-mock/extension\";\n\nProvider.instance.provideMethodWithDeferredValue((name: string, value: () => any) => {\n    return jasmine.createSpy(name).and.callFake(value);\n});\n`}</code></pre>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`Infer the type of the return value`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`type ReturnType = jasmine.Spy;\n\ndeclare module 'ts-auto-mock/extension' {\n  interface Method<TR> extends ReturnType {}\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"method-usage\"\n    }}>{`Method Usage`}</h3>\n    <ol>\n      <li parentName=\"ol\">{`Create an interface`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface Interface {\n    methodToSpy: () => string\n}\n`}</code></pre>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`Create a mock`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const mock: Interface = createMock<Interface>();\n`}</code></pre>\n    <ol {...{\n      \"start\": 3\n    }}>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Get the spy from the method.`}</p>\n        <p parentName=\"li\">{`You can extract the method being spied in two different ways.`}</p>\n        <ol parentName=\"li\">\n          <li parentName=\"ol\">{`Through a callback function that accesses the mock:`}<pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-ts\"\n              }}>{`import { On, method } from \"ts-auto-mock/extension\";\nconst spy: jasmine.Spy = On(mock).get(method(mock => mock.methodToSpy));\n`}</code></pre></li>\n          <li parentName=\"ol\">{`Or, directly as string:`}<pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-ts\"\n              }}>{`import { On, method } from \"ts-auto-mock/extension\";\nconst spy: jasmine.Spy = On(mock).get(method('methodToSpy'));\n`}</code></pre></li>\n        </ol>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Trigger the method and perform your assertions`}</p>\n      </li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`someMethodThatWillTriggerInterfaceA();\nexpect(spy).toHaveBeenCalled();\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}