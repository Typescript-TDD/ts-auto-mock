(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{Ew11:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return a})),t.d(n,"default",(function(){return d}));t("5hJT"),t("W1QL"),t("K/PF"),t("t91x"),t("75LO"),t("PJhk");var o=t("/FXl"),r=t("TjRS");t("aD51");function c(){return(c=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}var a={};void 0!==a&&a&&a===Object(a)&&Object.isExtensible(a)&&!a.hasOwnProperty("__filemeta")&&Object.defineProperty(a,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/views/create-mock.mdx"}});var i={_frontmatter:a},s=r.a;function d(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,o,r={},c=Object.keys(e);for(o=0;o<c.length;o++)t=c[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,["components"]);return Object(o.b)(s,c({},i,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"create-mock"},"Create mock"),Object(o.b)("pre",null,Object(o.b)("code",c({parentName:"pre"},{className:"language-ts"}),'import { createMock } from \'ts-auto-mock\';\n\ninterface Person {\n  id: string;\n  getName(): string;\n  details: {\n      phone: number\n  }\n}\nconst mock = createMock<Person>();\nmock.id // ""\nmock.getName() // ""\nmock.details // { phone: 0 }\n')),Object(o.b)("h2",{id:"property-overrides"},"Property overrides"),Object(o.b)("p",null,"If you desire, you may override the otherwise mocked properties of an interface."),Object(o.b)("p",null,"You don't have to provide the entire interface, just a partial object of the one you are mocking."),Object(o.b)("pre",null,Object(o.b)("code",c({parentName:"pre"},{className:"language-ts"}),'import { createMock } from \'ts-auto-mock\';\n\ninterface Person {\n  id: string;\n  getName(): string;\n  details: {\n    phone: number\n  }\n}\n\nconst mock = createMock<Person>({\n    details: {\n      phone: 7423232323\n    }\n});\n\nmock.id // ""\nmock.getName() // ""\nmock.details // { phone: 7423232323 }\n')),Object(o.b)("h3",{id:"override-with-created-mock-as-value"},"Override with created mock as value"),Object(o.b)("p",null,"If a mock is used as a value in the override object the mock will be entirely assigned and not merged. This is done to\navoid issues with recursive mocks. Surely this won't be a problem for anyone but it's worth writing it in the documentation."),Object(o.b)("pre",null,Object(o.b)("code",c({parentName:"pre"},{className:"language-ts"}),"import { createMock } from 'ts-auto-mock';\n\ninterface Person {\n  id: string;\n}\n\ninterface PersonParent {\n  child: Person;\n}\n\nconst personMock = createMock<Person>();\nconst parentMock = createMock<PersonParent>({\n    child: personMock\n});\n\nparentMock.child === personMock // true\n\nconst personMock2 = createMock<Person>();\ndelete personMock2.id;\nconst parentMock2 = createMock<PersonParent>({\n    child: personMock2\n});\n\nparentMock2.child === personMock2 // true\nparentMock2.child.id // undefined, even if `id` was not in the override object (personMock2) it still did override\n                     // because the entire `personMock2` was assigned to `child`\n")))}d&&d===Object(d)&&Object.isExtensible(d)&&!d.hasOwnProperty("__filemeta")&&Object.defineProperty(d,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/views/create-mock.mdx"}}),d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-views-create-mock-mdx-86731ea300ca0cd07ffd.js.map