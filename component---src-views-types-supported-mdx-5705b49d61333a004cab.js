(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{Fb1g:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return o})),t.d(n,"default",(function(){return l}));var c=t("k0FJ"),a=t("oedh"),s=t("/FXl"),r=t("TjRS"),o=(t("aD51"),{});void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/views/types-supported.mdx"}});var i={_frontmatter:o},b=r.a;function l(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(s.b)(b,Object(c.a)({},i,t,{components:n,mdxType:"MDXLayout"}),Object(s.b)("h1",{id:"types-supported"},"Types supported"),Object(s.b)("p",null,"The library tries to convert the type argument passed to createMock so you don't have to mock them manually."),Object(s.b)("h2",{id:"primitive"},"Primitive"),Object(s.b)("pre",null,Object(s.b)("code",Object(c.a)({parentName:"pre"},{className:"language-ts"}),'number // 0\nstring // ""\nboolean // false\nboolean[] // []\nvoid // undefined\nnull // null\nundefined // undefined\nnever // undefined\n')),Object(s.b)("h2",{id:"interfaces"},"Interfaces"),Object(s.b)("pre",null,Object(s.b)("code",Object(c.a)({parentName:"pre"},{className:"language-ts"}),'interface Person {\n  id: string\n  name: string\n}\n/*\n{\n  id: "",\n  name: ""\n}\n*/\n')),Object(s.b)("h2",{id:"interfaces-with-call-signatures"},"Interfaces with call signatures"),Object(s.b)("p",null,"For overload methods it will use the first one"),Object(s.b)("pre",null,Object(s.b)("code",Object(c.a)({parentName:"pre"},{className:"language-ts"}),'interface Person {\n  (): number\n  (): string\n  name: string\n}\n\nconst mock = createMock<Person>();\nmock() // 0\nmock.name // ""\n')),Object(s.b)("h2",{id:"interfaces-with-construct-signatures"},"Interfaces with construct signatures"),Object(s.b)("p",null,"For overload constructors it will use the first one"),Object(s.b)("pre",null,Object(s.b)("code",Object(c.a)({parentName:"pre"},{className:"language-ts"}),'interface PersonWithHat {\n  hatSize: number;\n}\n\ninterface PersonWithoutHat {\n  shirtSize: number;\n}\n\ninterface Person {\n  new (hatSize: number): PersonWithHat\n  new (): PersonWithoutHat\n  name: string\n}\n\nconst mock = createMock<Person>();\nnew mock() // { hatSize: 0 }\nmock.name // ""\n')),Object(s.b)("h2",{id:"classes"},"Classes"),Object(s.b)("pre",null,Object(s.b)("code",Object(c.a)({parentName:"pre"},{className:"language-ts"}),'class Person {\n  private _id: string;\n  name: string\n}\n/*\n{\n  name: ""\n}\n*/\n')),Object(s.b)("h2",{id:"methods"},"Methods"),Object(s.b)("pre",null,Object(s.b)("code",Object(c.a)({parentName:"pre"},{className:"language-ts"}),'interface InterfaceWithMethod {\n  method(): string\n}\n/*\n{\n  method: () => {\n    return ""\n  }\n}\n*/\n')),Object(s.b)("h2",{id:"literal"},"Literal"),Object(s.b)("pre",null,Object(s.b)("code",Object(c.a)({parentName:"pre"},{className:"language-ts"}),'type Data = {\n  id: "I am a specific string",\n  number: 2\n}\n/*\n{\n  id: "I am a specific string",\n  number: 2\n}\n/*\n')),Object(s.b)("h2",{id:"enum-it-will-select-the-first-value"},"Enum (it will select the first value)"),Object(s.b)("pre",null,Object(s.b)("code",Object(c.a)({parentName:"pre"},{className:"language-ts"}),"enum Direction {\n  LEFT,\n  RIGHT\n}\n\ninterface WithEnum {\n  direction: Direction\n}\n/*\n{\n  direction: DIRECTION.LEFT\n}\n/*\n")),Object(s.b)("h2",{id:"function"},"Function"),Object(s.b)("pre",null,Object(s.b)("code",Object(c.a)({parentName:"pre"},{className:"language-ts"}),'const mock = createMock<() => string>();\nmock // () => ""\n')),Object(s.b)("h2",{id:"object"},"Object"),Object(s.b)("pre",null,Object(s.b)("code",Object(c.a)({parentName:"pre"},{className:"language-ts"}),'const mock = createMock<{ a: string }>();\nmock // { a: "" }\n')),Object(s.b)("h2",{id:"key-in"},"Key in"),Object(s.b)("pre",null,Object(s.b)("code",Object(c.a)({parentName:"pre"},{className:"language-ts"}),'type Keys = "a" | "b";\ntype myType = { [key in Keys]: string }\nconst mock = createMock<myType>();\nmock // { a: "", b: "" }\n')),Object(s.b)("h2",{id:"key-in-keyof"},"Key in keyof"),Object(s.b)("pre",null,Object(s.b)("code",Object(c.a)({parentName:"pre"},{className:"language-ts"}),'type Keys = {\n    a: number;\n}\ntype keyInKeyof = { [key in keyof Keys]: string }\nconst mock = createMock<keyInKeyof>();\nmock // { a: "" }\n')),Object(s.b)("h2",{id:"optional"},"Optional"),Object(s.b)("p",null,"The property is not defined in the mock"),Object(s.b)("pre",null,Object(s.b)("code",Object(c.a)({parentName:"pre"},{className:"language-ts"}),"class MyClass {\n    test?: string;\n}\nconst mock = createMock<MyClass>();\nmock // { }\n")),Object(s.b)("h2",{id:"typescript-libraries-array-number-ecc"},"Typescript libraries (Array, Number... ecc)"),Object(s.b)("p",null,"This is a special case. The library tries to convert to the most useful type."),Object(s.b)("pre",null,Object(s.b)("code",Object(c.a)({parentName:"pre"},{className:"language-ts"}),'class MyClass {\n  array: Array<number>; // []\n  number: Number; // 0\n  promise: Promise<string>; // a promise that will resolve an empty string Promise.resolve("")\n  map: Map<string, string>; // new Map()\n  set: Set<string>; // new Set()\n}\n')),Object(s.b)("h2",{id:"tuple"},"Tuple"),Object(s.b)("pre",null,Object(s.b)("code",Object(c.a)({parentName:"pre"},{className:"language-ts"}),"class MyClass {\n  tuple: [string, number];\n}\n\nconst mock = createMock<MyClass>();\nmock // { tuple: ['', 0] }\n")),Object(s.b)("h2",{id:"union"},"Union"),Object(s.b)("p",null,'It will convert to the first type of the union unless undefined/void are part of the union,\nin that case it will convert to undefined, being the "smallest type"'),Object(s.b)("pre",null,Object(s.b)("code",Object(c.a)({parentName:"pre"},{className:"language-ts"}),'class MyClass {\n  union: string | number;\n}\n\nconst mock = createMock<MyClass>();\nmock // { union: "" }\n\nclass MyClass1 {\n  union: string | undefined;\n}\n\nconst mock1 = createMock<MyClass1>();\nmock1 // { union: undefined }\n')),Object(s.b)("h2",{id:"dictionary"},"Dictionary"),Object(s.b)("pre",null,Object(s.b)("code",Object(c.a)({parentName:"pre"},{className:"language-ts"}),"type Dictionary<T> = {\n  [key: string]: T;\n}\n\nconst mock = createMock<Dictionary<Interface>>();\nmock // {}\n")),Object(s.b)("h2",{id:"extends"},"Extends"),Object(s.b)("pre",null,Object(s.b)("code",Object(c.a)({parentName:"pre"},{className:"language-ts"}),'interface Keys {\n  a: string;\n}\ninterface Interface extends Keys {\n  b: boolean;\n}\n\nconst mock = createMock<Interface>();\nmock // { a: "", b: "" }\n')),Object(s.b)("h2",{id:"generics"},"Generics"),Object(s.b)("pre",null,Object(s.b)("code",Object(c.a)({parentName:"pre"},{className:"language-ts"}),'interface WithGeneric<T>{\n  generic: T\n}\n\nconst mock = createMock<WithGeneric<string>>();\nmock // { generic: "" }\n')),Object(s.b)("h2",{id:"intersection"},"Intersection"),Object(s.b)("pre",null,Object(s.b)("code",Object(c.a)({parentName:"pre"},{className:"language-ts"}),'interface IntersectionA {\n  a: string;\n}\n\ninterface IntersectionB {\n  b: number;\n}\n\ninterface Interface {\n  intersection: IntersectionA & IntersectionB,\n}\n\nconst mock = createMock<Interface>();\nmock // { intersection: { a: "", b: 0 } }\n')),Object(s.b)("h2",{id:"constructortype"},"ConstructorType"),Object(s.b)("pre",null,Object(s.b)("code",Object(c.a)({parentName:"pre"},{className:"language-ts"}),'interface Test {\n  a: string;\n}\nconst mockType = createMock<new () => Test>();\nconst mock = new mockType();\n\nmock = // { a: "" }\n')),Object(s.b)("h2",{id:"typequery"},"TypeQuery"),Object(s.b)("pre",null,Object(s.b)("code",Object(c.a)({parentName:"pre"},{className:"language-ts"}),"enum AnEnum {\n  a,\n  b = 'something',\n}\n\nconst mock = createMock<typeof AnEnum>();\nmock.a // 0\nmock.b // 'something'\nmock[0] // 'a'\n\nclass AClass {\n  a: string\n}\n\nconst mockClass = createMock<typeof AClass>();\nnew mockClass().a // ''\n\nfunction AFunction(): number;\n\nconst mockFunction = createMock<typeof AFunction>();\nmockFunction() // 0\n")),Object(s.b)("h2",{id:"indexedaccesstype"},"IndexedAccessType"),Object(s.b)("pre",null,Object(s.b)("code",Object(c.a)({parentName:"pre"},{className:"language-ts"}),"class Class {\n  a: string\n}\n\ntype KeyOf = { [key in keyof Class]: Class[key] };\nconst mock = createMock<KeyOf>();\nmock.a // ''\n")))}void 0!==l&&l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/views/types-supported.mdx"}}),l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-views-types-supported-mdx-5705b49d61333a004cab.js.map