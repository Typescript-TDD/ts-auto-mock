(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{"45nI":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return c})),n.d(t,"default",(function(){return s}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk");var a=n("/FXl"),r=n("TjRS");n("aD51");function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var c={};void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/views/extension.mdx"}});var i={_frontmatter:c},l=r.a;function s(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,["components"]);return Object(a.b)(l,o({},i,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"extension"},"Extension"),Object(a.b)("p",null,"To preserve type safety, we utilize the capability of the type checker to infer types through external interfaces, which enables us to easily inject spies from various testing frameworks without having to perform implicit type casts."),Object(a.b)("p",null,"If you need custom spies you can use our framework to wrap- and later extract them."),Object(a.b)("h2",{id:"custom-method"},"Custom Method"),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"This example is taken from: ",Object(a.b)("a",o({parentName:"em"},{href:"https://github.com/Typescript-TDD/jasmine-ts-auto-mock"}),Object(a.b)("inlineCode",{parentName:"a"},"jasmine-ts-auto-mock")))),Object(a.b)("p",null,"To extend a method you need to:"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"Create your spy function (",Object(a.b)("inlineCode",{parentName:"p"},"jasmine.createSpy(name)"),")"),Object(a.b)("p",{parentName:"li"},"Please note that the value returned from ",Object(a.b)("inlineCode",{parentName:"p"},"provideMethodWithDeferredValue")," must be a function."),Object(a.b)("p",{parentName:"li"},"Therefore, you will need to make sure that the method you are providing will not execute the function directly, otherwise it will cause an infinite recursion and crash the application almost immediately, once it exceeds the allowed call stack size."),Object(a.b)("p",{parentName:"li"},"In the example below, the function to be spied upon is passed into ",Object(a.b)("inlineCode",{parentName:"p"},"callFake")," which will prevent the function from being executed directly."))),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-ts"}),'import { Provider } from "ts-auto-mock/extension";\n\nProvider.instance.provideMethodWithDeferredValue((name: string, value: () => any) => {\n    return jasmine.createSpy(name).and.callFake(value);\n});\n')),Object(a.b)("ol",{start:2},Object(a.b)("li",{parentName:"ol"},"Infer the type of the return value")),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-ts"}),"type ReturnType = jasmine.Spy;\n\ndeclare module 'ts-auto-mock/extension' {\n  interface Method<TR> extends ReturnType {}\n}\n")),Object(a.b)("h3",{id:"method-usage"},"Method Usage"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"Create an interface")),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-ts"}),"interface Interface {\n    methodToSpy: () => string\n}\n")),Object(a.b)("ol",{start:2},Object(a.b)("li",{parentName:"ol"},"Create a mock")),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-ts"}),"const mock: Interface = createMock<Interface>();\n")),Object(a.b)("ol",{start:3},Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"Get the spy from the method."),Object(a.b)("p",{parentName:"li"},"You can extract the method being spied in two different ways."),Object(a.b)("ol",{parentName:"li"},Object(a.b)("li",{parentName:"ol"},"Through a callback function that accesses the mock:",Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",o({parentName:"pre"},{className:"language-ts"}),'import { On, method } from "ts-auto-mock/extension";\nconst spy: jasmine.Spy = On(mock).get(method(mock => mock.methodToSpy));\n'))),Object(a.b)("li",{parentName:"ol"},"Or, directly as string:",Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",o({parentName:"pre"},{className:"language-ts"}),"import { On, method } from \"ts-auto-mock/extension\";\nconst spy: jasmine.Spy = On(mock).get(method('methodToSpy'));\n"))))),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"Trigger the method and perform your assertions"))),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-ts"}),"someMethodThatWillTriggerInterfaceA();\nexpect(spy).toHaveBeenCalled();\n")))}s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/views/extension.mdx"}}),s.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-views-extension-mdx-3ad2338ba01eedd99c0f.js.map