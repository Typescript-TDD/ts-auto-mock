(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{"0ox8":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return r})),n.d(t,"default",(function(){return p}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk");var a=n("/FXl"),o=n("TjRS");n("aD51");function s(){return(s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var r={};void 0!==r&&r&&r===Object(r)&&Object.isExtensible(r)&&!r.hasOwnProperty("__filemeta")&&Object.defineProperty(r,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/views/installation.mdx"}});var c={_frontmatter:r},b=o.a;function p(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,["components"]);return Object(a.b)(b,s({},c,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"installation"},"Installation"),Object(a.b)("p",null,"To make this library work you need to apply the ",Object(a.b)("inlineCode",{parentName:"p"},"ts-auto-mock")," transformer at compile time."),Object(a.b)("p",null,"Unfortunately, TypeScript itself does not currently provide any easy way to use custom transformers out of the box."),Object(a.b)("p",null,Object(a.b)("a",s({parentName:"p"},{href:"https://github.com/Microsoft/TypeScript/issues/14419"}),"See this TypeScript issue"),"."),Object(a.b)("p",null,"There are different ways to do this depending on how you are currently compiling your TypeScript files"),Object(a.b)("h2",{id:"jest--ts-jest--ttypescript"},Object(a.b)("inlineCode",{parentName:"h2"},"jest")," + ",Object(a.b)("inlineCode",{parentName:"h2"},"ts-jest")," + ",Object(a.b)("inlineCode",{parentName:"h2"},"ttypescript")),Object(a.b)("h3",{id:"steps"},"Steps"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"Install the dependencies")),Object(a.b)("pre",null,Object(a.b)("code",s({parentName:"pre"},{}),"npm install jest ts-jest typescript ttypescript jest-ts-auto-mock ts-auto-mock\n")),Object(a.b)("p",null,"you need to have ",Object(a.b)("inlineCode",{parentName:"p"},"ttypescript")," installed to patch and enable the TypeScript-runtime to apply the transformer."),Object(a.b)("ol",{start:2},Object(a.b)("li",{parentName:"ol"},"Add the transformer to your ",Object(a.b)("inlineCode",{parentName:"li"},"tsconfig.json"))),Object(a.b)("pre",null,Object(a.b)("code",s({parentName:"pre"},{className:"language-json"}),'  ...\n  "compilerOptions": {\n    ...\n    "plugins": [\n      {\n        "transform": "ts-auto-mock/transformer",\n        "cacheBetweenTests": false\n      }\n    ]\n    ...\n  }\n  ...\n')),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Remember to set ",Object(a.b)("inlineCode",{parentName:"p"},"cacheBetweenTests")," to ",Object(a.b)("inlineCode",{parentName:"p"},"false")," because Jest runs tests in parallel and ts-auto-mock doesn't yet support caching across parallel tests")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"You can find a JSON example ",Object(a.b)("a",s({parentName:"p"},{href:"https://github.com/Typescript-TDD/jest-ts-auto-mock/blob/master/examples/ts-jest-ttypescript/tsconfig.json"}),"here")))),Object(a.b)("ol",{start:3},Object(a.b)("li",{parentName:"ol"},"Add ",Object(a.b)("inlineCode",{parentName:"li"},"ts-jest")," to the transformation pattern in the Jest config")),Object(a.b)("h4",{id:"packagejson--jestconfigjs-without-the-jest-scope"},Object(a.b)("strong",{parentName:"h4"},Object(a.b)("inlineCode",{parentName:"strong"},"package.json")," / ",Object(a.b)("inlineCode",{parentName:"strong"},"jest.config.js")," (without the ",Object(a.b)("inlineCode",{parentName:"strong"},"jest")," scope)")),Object(a.b)("pre",null,Object(a.b)("code",s({parentName:"pre"},{className:"language-json"}),'...\n  "jest": {\n    "transform": {\n      ".(ts|tsx)": "ts-jest"\n    }\n  }\n...\n')),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"You can find a JSON example ",Object(a.b)("a",s({parentName:"li"},{href:"https://github.com/Typescript-TDD/jest-ts-auto-mock/blob/master/examples/ts-jest-ttypescript/package.json"}),"here"))),Object(a.b)("ol",{start:4},Object(a.b)("li",{parentName:"ol"},"Add ",Object(a.b)("inlineCode",{parentName:"li"},"ttypescript")," to be used as ",Object(a.b)("inlineCode",{parentName:"li"},"ts-jest")," compiler")),Object(a.b)("h4",{id:"packagejson--jestconfigjs-without-the-jest-scope-1"},Object(a.b)("strong",{parentName:"h4"},Object(a.b)("inlineCode",{parentName:"strong"},"package.json")," / ",Object(a.b)("inlineCode",{parentName:"strong"},"jest.config.js")," (without the ",Object(a.b)("inlineCode",{parentName:"strong"},"jest")," scope)")),Object(a.b)("pre",null,Object(a.b)("code",s({parentName:"pre"},{className:"language-json"}),'...\n  "jest": {\n    "globals": {\n      "ts-jest": {\n        "compiler": "ttypescript"\n      }\n    }\n  }\n...\n')),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"You can find a JSON example ",Object(a.b)("a",s({parentName:"li"},{href:"https://github.com/Typescript-TDD/jest-ts-auto-mock/blob/master/examples/ts-jest-ttypescript/package.json"}),"here"))),Object(a.b)("ol",{start:5},Object(a.b)("li",{parentName:"ol"},"Add ",Object(a.b)("inlineCode",{parentName:"li"},"jest-ts-auto-mock")," config file as your setup file")),Object(a.b)("h4",{id:"packagejson--jestconfigjs-without-the-jest-scope-2"},Object(a.b)("strong",{parentName:"h4"},Object(a.b)("inlineCode",{parentName:"strong"},"package.json")," / ",Object(a.b)("inlineCode",{parentName:"strong"},"jest.config.js")," (without the ",Object(a.b)("inlineCode",{parentName:"strong"},"jest")," scope)")),Object(a.b)("pre",null,Object(a.b)("code",s({parentName:"pre"},{className:"language-json"}),'...\n  "jest": {\n    "setupFiles": [\n      "<rootDir>config.ts"\n    ]\n  }\n...\n')),Object(a.b)("h4",{id:"configts"},Object(a.b)("strong",{parentName:"h4"},Object(a.b)("inlineCode",{parentName:"strong"},"config.ts"))),Object(a.b)("pre",null,Object(a.b)("code",s({parentName:"pre"},{className:"language-ts"}),"import 'jest-ts-auto-mock';\n")),Object(a.b)("p",null,Object(a.b)("a",s({parentName:"p"},{href:"https://github.com/Typescript-TDD/jest-ts-auto-mock/blob/master/examples/ts-jest-ttypescript/config.ts"}),"Example")),Object(a.b)("ol",{start:6},Object(a.b)("li",{parentName:"ol"},"Create your first test")),Object(a.b)("pre",null,Object(a.b)("code",s({parentName:"pre"},{className:"language-ts"}),"import { createMock } from 'ts-auto-mock';\n\ninterface Interface {\n  a: string;\n  b: number;\n}\n\ndescribe('reuse', () => {\n  let mock: Interface;\n\n  beforeEach(() => {\n    mock = createMock<Interface>();\n  });\n\n  it('should work', () => {\n    expect(mock.a).toBe('');\n  });\n});\n\n")),Object(a.b)("ol",{start:7},Object(a.b)("li",{parentName:"ol"},"Run your test")),Object(a.b)("h4",{id:"packagejson"},Object(a.b)("strong",{parentName:"h4"},Object(a.b)("inlineCode",{parentName:"strong"},"package.json"))),Object(a.b)("pre",null,Object(a.b)("code",s({parentName:"pre"},{className:"language-json"}),'...\n  "scripts": {\n    ...\n    "test": "jest"\n    ...\n  }\n...\n')),Object(a.b)("pre",null,Object(a.b)("code",s({parentName:"pre"},{}),"npm run test\n")),Object(a.b)("p",null,"... and you are all done!"),Object(a.b)("h3",{id:"config-options"},"Config options"),Object(a.b)("p",null,"In the tsconfig.json you can add the config options next to the transformer name:"),Object(a.b)("pre",null,Object(a.b)("code",s({parentName:"pre"},{className:"language-json"}),'"plugins": [\n  {\n    "transform": "ts-auto-mock/transformer",\n    "cacheBetweenTests": false,\n    "features": ["random"]\n  }\n]\n')),Object(a.b)("h2",{id:"webpack"},"Webpack"),Object(a.b)("p",null,"With Webpack, You can use any TypeScript-related loader that supports custom transformers, e.g. ",Object(a.b)("inlineCode",{parentName:"p"},"awesome-typescript-loader")," or ",Object(a.b)("inlineCode",{parentName:"p"},"ts-loader"),":"),Object(a.b)("h3",{id:"steps-1"},"Steps"),Object(a.b)("h4",{id:"webpackconfigjs"},Object(a.b)("strong",{parentName:"h4"},Object(a.b)("inlineCode",{parentName:"strong"},"webpack.config.js"))),Object(a.b)("pre",null,Object(a.b)("code",s({parentName:"pre"},{className:"language-js"}),"const tsAutoMockTransformer = require('ts-auto-mock/transformer').default;\n\nmodule.exports = {\n  // ...\n  module: {\n    rules: [\n      {\n        test: /\\.ts$/,\n        loader: 'ts-loader', // or 'awesome-typescript-loader'\n        options: {\n          getCustomTransformers: program => ({\n              before: [\n                  tsAutoMockTransformer(program)\n              ]\n          })\n        }\n      }\n    ]\n  }\n};\n")),Object(a.b)("h3",{id:"config-options-1"},"Config options"),Object(a.b)("p",null,"In webpack.config.js you can pass a second parameter to the transformer:"),Object(a.b)("pre",null,Object(a.b)("code",s({parentName:"pre"},{className:"language-js"}),"before: [\n  tsAutoMockTransformer(program, {\n    features: ['random']\n  })\n]\n")),Object(a.b)("h2",{id:"ttypescript"},"ttypescript"),Object(a.b)("p",null,"See ",Object(a.b)("a",s({parentName:"p"},{href:"https://github.com/cevek/ttypescript/blob/master/README.md"}),"ttypescript's README")," for more information"),Object(a.b)("h3",{id:"steps-2"},"Steps"),Object(a.b)("h4",{id:"tsconfigjson"},Object(a.b)("strong",{parentName:"h4"},Object(a.b)("inlineCode",{parentName:"strong"},"tsconfig.json"))),Object(a.b)("pre",null,Object(a.b)("code",s({parentName:"pre"},{className:"language-json"}),'{\n  "compilerOptions": {\n    //...,\n    "plugins": [\n      { "transform": "ts-auto-mock/transformer" }\n    ]\n  },\n  //...\n}\n')),Object(a.b)("h3",{id:"config-options-2"},"Config options"),Object(a.b)("p",null,"In the tsconfig.json you can add the config options next to the transformer name:"),Object(a.b)("pre",null,Object(a.b)("code",s({parentName:"pre"},{className:"language-json"}),'"plugins": [\n  {\n    "transform": "ts-auto-mock/transformer",\n    "cacheBetweenTests": false,\n    "features": ["random"]\n  }\n]\n')),Object(a.b)("h2",{id:"ts-patch"},"ts-patch"),Object(a.b)("p",null,"See ",Object(a.b)("a",s({parentName:"p"},{href:"https://github.com/nonara/ts-patch/blob/master/README.md"}),"ts-patch's README")),Object(a.b)("h3",{id:"steps-3"},"Steps"),Object(a.b)("p",null,"Command to run to install it:"),Object(a.b)("pre",null,Object(a.b)("code",s({parentName:"pre"},{}),"npm i ts-patch\nts-patch install\n")),Object(a.b)("p",null,"tsconfig.json"),Object(a.b)("pre",null,Object(a.b)("code",s({parentName:"pre"},{className:"language-json"}),'{\n  "compilerOptions": {\n    //...,\n    "plugins": [\n      { "transform": "ts-auto-mock/transformer" }\n    ]\n  },\n  //...\n}\n')),Object(a.b)("h3",{id:"config-options-3"},"Config options"),Object(a.b)("p",null,"In the tsconfig.json you can add the config options next to the transformer name:"),Object(a.b)("pre",null,Object(a.b)("code",s({parentName:"pre"},{className:"language-json"}),'"plugins": [\n  {\n    "transform": "ts-auto-mock/transformer",\n    "cacheBetweenTests": false,\n    "features": ["random"]\n  }\n]\n')),Object(a.b)("h2",{id:"ts-node--mocha"},"ts-node + Mocha"),Object(a.b)("h3",{id:"steps-4"},"Steps"),Object(a.b)("h4",{id:"tsnodejs"},Object(a.b)("strong",{parentName:"h4"},Object(a.b)("inlineCode",{parentName:"strong"},"tsnode.js"))),Object(a.b)("pre",null,Object(a.b)("code",s({parentName:"pre"},{className:"language-js"}),"const tsAutoMockTransformer = require('ts-auto-mock/transformer').default;\n\nrequire('ts-node').register({\n  transformers: program => ({\n    before: [\n      tsAutoMockTransformer(program)\n    ]\n  })\n});\n")),Object(a.b)("p",null,"Then inject the registration with the ",Object(a.b)("inlineCode",{parentName:"p"},"--require")," flag that Mocha passes on to Node.js:"),Object(a.b)("pre",null,Object(a.b)("code",s({parentName:"pre"},{}),"mocha --require './tsnode.js' --watch-extensions ts,tsx \"test/**/*.{ts,tsx}\"\n")),Object(a.b)("h3",{id:"config-options-4"},"Config options"),Object(a.b)("p",null,"In tsnode.js you can pass a second parameter to the transformer:"),Object(a.b)("pre",null,Object(a.b)("code",s({parentName:"pre"},{className:"language-js"}),"before: [\n  tsAutoMockTransformer(program, {\n    features: ['random']\n  })\n]\n")))}p&&p===Object(p)&&Object.isExtensible(p)&&!p.hasOwnProperty("__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/views/installation.mdx"}}),p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-views-installation-mdx-60539a5a1e3461a7cbe3.js.map