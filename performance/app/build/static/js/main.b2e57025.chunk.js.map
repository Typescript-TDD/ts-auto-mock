{"version":3,"sources":["Chart.js","App.js","index.js"],"names":["Chart","props","data","map","feature","name","types","total_time","result","value","width","height","margin","top","right","left","bottom","dataKey","fill","App","React","useState","branch","selectBranch","setData","branchNames","setBranches","useEffect","axios","get","then","dataAdapted","Object","keys","reduce","branchKey","forEach","commitKey","dateKey","push","commit","date","features","sort","a","b","Date","adaptDataForChart","branches","branchName","index","key","charts","filter","s","className","defaultValue","onChange","event","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"2PAKO,SAASA,EAAMC,GAClB,IAAMC,EAAOD,EAAMC,KAAKC,KAAI,SAACC,GACzB,MAAO,CACHC,KAAMD,EAAQE,MACdC,WAAYH,EAAQI,OAAOD,WAAWE,UAI9C,OACE,kBAAC,IAAD,CACEC,MAAO,IACPC,OAAQ,IACRT,KAAMA,EACNU,OAAQ,CACJC,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,IAGvC,kBAAC,IAAD,CAAOC,QAAQ,SACf,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAKA,QAAQ,aAAaC,KAAK,a,sBC0C1BC,MA5Cf,WAAgB,IAAD,EACoBC,IAAMC,SAAS,UADnC,mBACJC,EADI,KACIC,EADJ,OAEaH,IAAMC,SAAS,IAF5B,mBAEJnB,EAFI,KAEEsB,EAFF,OAGwBJ,IAAMC,SAAS,IAHvC,mBAGJI,EAHI,KAGSC,EAHT,KAKXC,qBAAU,WACNC,IAAMC,IAAI,4DAA4DC,MAAK,SAACtB,GACxE,IAAMuB,EA1BlB,SAA2B7B,GACvB,OAAO8B,OAAOC,KAAK/B,GAAMgC,QAAQ,SAAC1B,EAAQ2B,GAYtC,OAXAH,OAAOC,KAAK/B,EAAKiC,IAAYC,SAAQ,SAACC,GAClCL,OAAOC,KAAK/B,EAAKiC,GAAWE,IAAYD,SAAQ,SAACE,GAC7C9B,EAAO+B,KAAK,CACRjB,OAAQa,EACRK,OAAQH,EACRI,KAAMH,EACNI,SAAUxC,EAAKiC,GAAWE,GAAWC,WAK1C9B,IACP,IAAImC,MAAK,SAACC,EAAGC,GACb,OAAO,IAAIC,KAAKD,EAAEJ,MAAQ,IAAIK,KAAKF,EAAEH,SAWbM,CAAkBvC,EAAON,KAAK,sBAC5C8C,EAAWxC,EAAON,KAAK,qBAE7BsB,EAAQO,GACRL,EAAYsB,QAEjB,IAEH,IAAMA,EAAWhB,OAAOC,KAAKR,GAAatB,KAAI,SAAC8C,EAAYC,GACvD,OAAO,4BAAQC,IAAKD,EAAOzC,MAAOwC,GAAaA,MAG7CG,EAASlD,EACZmD,QAAO,SAACjD,GAAD,OAAaA,EAAQkB,SAAWA,KACvCnB,KAAI,SAACmD,EAAGJ,GAAJ,OAAc,yBAAKC,IAAKD,GACzB,2BAAII,EAAEd,QACN,2BAAIc,EAAEb,MACN,kBAACzC,EAAD,CAAOE,KAAMoD,EAAEZ,eAGrB,OACE,yBAAKa,UAAU,OACX,yBAAKA,UAAU,oBACX,4BAAQA,UAAU,aAAaC,aAAa,OAAOC,SAAU,SAACC,GAAD,OAAWnC,EAAamC,EAAMC,OAAOlD,SAC9F,4BAAQA,MAAM,OAAOmD,UAAQ,GAA7B,QACCZ,IAIT,4BAAQO,UAAU,cACbH,KCxDfS,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.b2e57025.chunk.js","sourcesContent":["import React from 'react';\nimport {\n    BarChart, Bar, XAxis, YAxis, Tooltip, Legend,\n} from 'recharts';\n\nexport function Chart(props) {\n    const data = props.data.map((feature) => {\n        return {\n            name: feature.types,\n            total_time: feature.result.total_time.value,\n        }\n    });\n\n    return (\n      <BarChart\n        width={1000}\n        height={300}\n        data={data}\n        margin={{\n            top: 5, right: 30, left: 20, bottom: 5,\n        }}\n      >\n          <XAxis dataKey=\"name\"/>\n          <YAxis/>\n          <Tooltip/>\n          <Legend/>\n          <Bar dataKey=\"total_time\" fill=\"#8884d8\"/>\n      </BarChart>\n    );\n}\n","import React, {useEffect} from 'react';\nimport './App.css';\nimport {Chart} from \"./Chart\";\nimport axios from \"axios\";\n\nfunction adaptDataForChart(data) {\n    return Object.keys(data).reduce(((result, branchKey) => {\n        Object.keys(data[branchKey]).forEach((commitKey) => {\n            Object.keys(data[branchKey][commitKey]).forEach((dateKey) => {\n                result.push({\n                    branch: branchKey,\n                    commit: commitKey,\n                    date: dateKey,\n                    features: data[branchKey][commitKey][dateKey]\n                });\n            });\n        });\n\n        return result;\n    }), []).sort((a, b) => {\n        return new Date(b.date) - new Date(a.date);\n    })\n}\n\nfunction App() {\n    const [branch, selectBranch] = React.useState('master');\n    const [data, setData] = React.useState([]);\n    const [branchNames, setBranches] = React.useState([]);\n\n    useEffect(() => {\n        axios.get(\"https://api.jsonbin.io/b/5e0ccffff9369177b27624ce/latest\").then((result) => {\n            const dataAdapted = adaptDataForChart(result.data['performance-tests']);\n            const branches = result.data['performance-tests'];\n\n            setData(dataAdapted);\n            setBranches(branches);\n        });\n    }, []);\n\n    const branches = Object.keys(branchNames).map((branchName, index) => {\n        return <option key={index} value={branchName}>{branchName}</option>\n    });\n\n    const charts = data\n      .filter((feature) => feature.branch === branch)\n      .map((s, index) => <div key={index}>\n          <p>{s.commit}</p>\n          <p>{s.date}</p>\n          <Chart data={s.features} />\n        </div>\n          );\n    return (\n      <div className=\"App\">\n          <div className='select-container'>\n              <select className='select-css' defaultValue=\"None\" onChange={(event) => selectBranch(event.target.value)}>\n                  <option value=\"None\" disabled>None</option>\n                  {branches}\n              </select>\n          </div>\n\n          <header className=\"App-header\">\n              {charts}\n          </header>\n      </div>\n\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}