{"version":3,"sources":["repository/repository.js","Chart.js","App.js","index.js"],"names":["axios","require","module","exports","url","secret","get","headers","update","results","currentBranch","currentCommit","this","then","response","tests","data","now","Date","toISOString","put","Chart","props","map","feature","name","types","total_time","result","value","width","height","margin","top","right","left","bottom","dataKey","fill","performanceRepository","App","React","useState","branch","selectBranch","setData","branchNames","setBranches","useEffect","dataAdapted","Object","keys","reduce","branchKey","forEach","commitKey","dateKey","push","commit","date","features","sort","a","b","adaptDataForChart","branches","branchName","index","key","charts","filter","s","className","defaultValue","onChange","event","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"8NAAMA,EAAQC,EAAQ,KAkDtBC,EAAOC,QAhDP,SAA+BC,EAAKC,GAChC,MAAO,CACGC,IADH,sGAEQN,EAAMM,IAAIF,EAAM,UAAW,CAC9BG,QAAS,CACL,aAAcF,GAAU,OAJjC,sCAQGG,OARH,SAQUC,EAASC,EAAeC,GARlC,2FASQC,KAAKN,MAAMO,MAAK,SAACC,GACpB,IAAIC,EAAQD,EAASE,KAAK,qBACpBC,GAAM,IAAIC,MAAOC,cAElBJ,IACDA,EAAQ,IAGRA,EAAML,GACFK,EAAML,GAAeC,GACrBI,EAAML,GAAeC,GAAeM,GAAOR,EAE3CM,EAAML,GAAeC,GAArB,eACKM,EAAMR,GAIfM,EAAML,GAAN,eACKC,EADL,eAESM,EAAMR,IAKnBK,EAASE,KAAO,CACZ,oBAAqBD,GAGzBf,EAAMoB,IAAIhB,EAAKU,EAASE,KAAM,CAC1BT,QAAS,CACL,aAAcF,GAAU,UAvCrC,mD,oICEJ,SAASgB,EAAMC,GAClB,IAAMN,EAAOM,EAAMN,KAAKO,KAAI,SAACC,GACzB,MAAO,CACHC,KAAMD,EAAQE,MACdC,WAAYH,EAAQI,OAAOD,WAAWE,UAI9C,OACE,kBAAC,IAAD,CACEC,MAAO,IACPC,OAAQ,IACRf,KAAMA,EACNgB,OAAQ,CACJC,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,IAGvC,kBAAC,IAAD,CAAOC,QAAQ,SACf,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAKA,QAAQ,aAAaC,KAAK,aCvBzC,IAAMC,EAAwBtC,EAAQ,KAiEvBuC,MA5Cf,WAAgB,IAAD,EACoBC,IAAMC,SAAS,UADnC,mBACJC,EADI,KACIC,EADJ,OAEaH,IAAMC,SAAS,IAF5B,mBAEJ1B,EAFI,KAEE6B,EAFF,OAGwBJ,IAAMC,SAAS,IAHvC,mBAGJI,EAHI,KAGSC,EAHT,KAKXC,qBAAU,WACNT,EAAsB,qDAAqDjC,MAAMO,MAAK,SAACe,GACnF,IAAMqB,EA1BlB,SAA2BjC,GACvB,OAAOkC,OAAOC,KAAKnC,GAAMoC,QAAQ,SAACxB,EAAQyB,GAYtC,OAXAH,OAAOC,KAAKnC,EAAKqC,IAAYC,SAAQ,SAACC,GAClCL,OAAOC,KAAKnC,EAAKqC,GAAWE,IAAYD,SAAQ,SAACE,GAC7C5B,EAAO6B,KAAK,CACRd,OAAQU,EACRK,OAAQH,EACRI,KAAMH,EACNI,SAAU5C,EAAKqC,GAAWE,GAAWC,WAK1C5B,IACP,IAAIiC,MAAK,SAACC,EAAGC,GACb,OAAO,IAAI7C,KAAK6C,EAAEJ,MAAQ,IAAIzC,KAAK4C,EAAEH,SAWbK,CAAkBpC,EAAOZ,KAAK,sBAC5CiD,EAAWrC,EAAOZ,KAAK,qBAE7B6B,EAAQI,GACRF,EAAYkB,QAEjB,IAEH,IAAMA,EAAWf,OAAOC,KAAKL,GAAavB,KAAI,SAAC2C,EAAYC,GACvD,OAAO,4BAAQC,IAAKD,EAAOtC,MAAOqC,GAAaA,MAG7CG,EAASrD,EACZsD,QAAO,SAAC9C,GAAD,OAAaA,EAAQmB,SAAWA,KACvCpB,KAAI,SAACgD,EAAGJ,GAAJ,OAAc,yBAAKC,IAAKD,GACzB,2BAAII,EAAEb,QACN,2BAAIa,EAAEZ,MACN,kBAACtC,EAAD,CAAOL,KAAMuD,EAAEX,eAGrB,OACE,yBAAKY,UAAU,OACX,yBAAKA,UAAU,oBACX,4BAAQA,UAAU,aAAaC,aAAa,OAAOC,SAAU,SAACC,GAAD,OAAW/B,EAAa+B,EAAMC,OAAO/C,SAC9F,4BAAQA,MAAM,OAAOgD,UAAQ,GAA7B,QACCZ,IAIT,4BAAQO,UAAU,cACbH,KCxDfS,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.2b25c9fb.chunk.js","sourcesContent":["const axios = require('axios');\n\nfunction performanceRepository(url, secret) {\n    return {\n        async get() {\n            return axios.get(url + \"/latest\", {\n                headers: {\n                    \"secret-key\": secret || \"\"\n                }\n            })\n        },\n        async update(results, currentBranch, currentCommit) {\n            return this.get().then((response) => {\n                let tests = response.data['performance-tests'];\n                const now = new Date().toISOString();\n\n                if (!tests) {\n                    tests = {};\n                }\n\n                if (tests[currentBranch]) {\n                    if (tests[currentBranch][currentCommit]) {\n                        tests[currentBranch][currentCommit][now] = results;\n                    } else {\n                        tests[currentBranch][currentCommit] = {\n                            [now]: results\n                        }\n                    }\n                } else {\n                    tests[currentBranch] = {\n                        [currentCommit]: {\n                            [now]: results\n                        }\n                    }\n                }\n\n                response.data = {\n                    \"performance-tests\": tests\n                };\n\n                axios.put(url, response.data, {\n                    headers: {\n                        \"secret-key\": secret || \"\"\n                    }\n                });\n            });\n        }\n    }\n}\n\nmodule.exports = performanceRepository;\n","import React from 'react';\nimport {\n    BarChart, Bar, XAxis, YAxis, Tooltip, Legend,\n} from 'recharts';\n\nexport function Chart(props) {\n    const data = props.data.map((feature) => {\n        return {\n            name: feature.types,\n            total_time: feature.result.total_time.value,\n        }\n    });\n\n    return (\n      <BarChart\n        width={1000}\n        height={300}\n        data={data}\n        margin={{\n            top: 5, right: 30, left: 20, bottom: 5,\n        }}\n      >\n          <XAxis dataKey=\"name\"/>\n          <YAxis/>\n          <Tooltip/>\n          <Legend/>\n          <Bar dataKey=\"total_time\" fill=\"#8884d8\"/>\n      </BarChart>\n    );\n}\n","import React, {useEffect} from 'react';\nimport './App.css';\nimport {Chart} from \"./Chart\";\nconst performanceRepository = require(\"./repository/repository\");\n\nfunction adaptDataForChart(data) {\n    return Object.keys(data).reduce(((result, branchKey) => {\n        Object.keys(data[branchKey]).forEach((commitKey) => {\n            Object.keys(data[branchKey][commitKey]).forEach((dateKey) => {\n                result.push({\n                    branch: branchKey,\n                    commit: commitKey,\n                    date: dateKey,\n                    features: data[branchKey][commitKey][dateKey]\n                });\n            });\n        });\n\n        return result;\n    }), []).sort((a, b) => {\n        return new Date(b.date) - new Date(a.date);\n    })\n}\n\nfunction App() {\n    const [branch, selectBranch] = React.useState('master');\n    const [data, setData] = React.useState([]);\n    const [branchNames, setBranches] = React.useState([]);\n\n    useEffect(() => {\n        performanceRepository(\"https://api.jsonbin.io/b/5e0ccffff9369177b27624ce\").get().then((result) => {\n            const dataAdapted = adaptDataForChart(result.data['performance-tests']);\n            const branches = result.data['performance-tests'];\n\n            setData(dataAdapted);\n            setBranches(branches);\n        });\n    }, []);\n\n    const branches = Object.keys(branchNames).map((branchName, index) => {\n        return <option key={index} value={branchName}>{branchName}</option>\n    });\n\n    const charts = data\n      .filter((feature) => feature.branch === branch)\n      .map((s, index) => <div key={index}>\n          <p>{s.commit}</p>\n          <p>{s.date}</p>\n          <Chart data={s.features} />\n        </div>\n          );\n    return (\n      <div className=\"App\">\n          <div className='select-container'>\n              <select className='select-css' defaultValue=\"None\" onChange={(event) => selectBranch(event.target.value)}>\n                  <option value=\"None\" disabled>None</option>\n                  {branches}\n              </select>\n          </div>\n\n          <header className=\"App-header\">\n              {charts}\n          </header>\n      </div>\n\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}