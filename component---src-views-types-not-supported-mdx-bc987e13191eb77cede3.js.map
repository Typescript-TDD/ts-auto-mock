{"version":3,"sources":["webpack:///../src/views/types-not-supported.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"4OAMaA,G,UAAe,S,mNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,uBADR,uBAGA,8LAEA,iBAAQ,CACN,GAAM,mBADR,mBAGA,uBAAK,gCAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,yXAkBL,iBAAQ,CACN,GAAM,4BADR,4BAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,sQAaL,2JACA,iBAAQ,CACN,GAAM,uBADR,uBAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,sYAoBL,qBAAG,6BAAGA,WAAW,KAAQ,CACrB,KAAQ,8DADT,SAAH,8MAKA,kLACF,6BAAGA,WAAW,KAAQ,CAChB,KAAQ,oFADd,SAGE,iBAAQ,CACN,GAAM,qBADR,qBAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,sQAeL,mDACF,6BAAGA,WAAW,KAAQ,CAChB,KAAQ,4DADd,QADE,oGAKK,0BAAYA,WAAW,KAAvB,KALL,gRASA,iBAAQ,CACN,GAAM,qCADR,qCAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,2QAcL,mDACF,6BAAGA,WAAW,KAAQ,CAChB,KAAQ,8DADd,QADE,0GAMA,sBACE,kBAAIA,WAAW,MAAf,qBAEF,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8CAIL,sBACE,kBAAIA,WAAW,MAAf,kCACA,kBAAIA,WAAW,MAAf,iBAEF,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,2G,iNAYTJ,EAAWK,gBAAiB","file":"component---src-views-types-not-supported-mdx-bc987e13191eb77cede3.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/ts-auto-mock/ts-auto-mock/ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"types-not-supported\"\n    }}>{`Types not supported`}</h1>\n    <p>{`Like any library bugs keep us company. When we find a non supported type we try our best to fix it.\nIf it takes too much time to fix it we usually update this page.`}</p>\n    <h2 {...{\n      \"id\": \"conditionaltype\"\n    }}>{`ConditionalType`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`type TypeName<T> =\n    T extends string ? \"string\" :\n    T extends number ? \"number\" :\n    T extends boolean ? \"boolean\" :\n    T extends undefined ? \"undefined\" :\n    T extends Function ? \"function\" :\n    \"object\";\n\ninterface Test {\n  conditional: TypeName<string>;\n}\n\nconst mock = createMock<Test>();\n\nmock.conditional // should be string. It will be null\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"symbol-computed-property\"\n    }}>{`Symbol Computed Property`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`\nconst testSymbol: unique symbol = Symbol('aSymbol');\n\nexport interface WithSymbolComputed {\n    [testSymbol]: string;\n}\n\nconst mock = createMock<WithSymbolComputed>();\n\nObject.getOwnPropertySymbols(mock); //it should return the symbol testSymbol\n`}</code></pre>\n    <p>{`TsAutoMock will create a property with the random name generated by typescript (example __@aSymbol) instead of the correct symbol.`}</p>\n    <h2 {...{\n      \"id\": \"extends-mapped-type\"\n    }}>{`Extends Mapped Type`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`\nenum SOME_ENUM {\n    FIRST = 'FIRST',\n    SECOND = 'SECOND',\n}\n\ninterface IBase {\n    someField: string;\n    anotherField: number;\n}\n\ninterface InterfaceWithExtendsMappedType extends Record<SOME_ENUM, IBase[]> {}\n\nconst mock = createMock<InterfaceWithExtendsMappedType>();\n\nmock.FIRST // undefined, it should be IBase[]\nmock.SECOND // undefined, it should be IBase[]\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Typescript-TDD/ts-auto-mock/issues/238\"\n      }}>{`issue`}</a>{`\nUnfortunately this functionality doesnt work yet because when getting properties from an interface that extend\na mapped type typescript returns a different type of property that is difficult to mock.`}</p>\n    <p>{`There is a branch created with a working version but it needs more investigation because the implementation is not readable and it may cause more issues\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Typescript-TDD/ts-auto-mock/tree/feature/extends-mapped-type\"\n      }}>{`link`}</a></p>\n    <h2 {...{\n      \"id\": \"circular-generics\"\n    }}>{`Circular Generics`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`class C<T> {\n  public propC: T\n  public test: string\n}\n\nclass A extends C<A> {\n  public propA: number\n}\nconst a: A = createMock<A>();\n\n// This will fail because we will not support generics of the same type.\nexpect(a.propC.propC.test).toBe(\"\");\n`}</code></pre>\n    <p>{`These are discussed here:\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Typescript-TDD/ts-auto-mock/pull/312\"\n      }}>{`link`}</a>{`. As of this\nwriting, the problem with circular generics is that the generated AST will\ncircle `}<inlineCode parentName=\"p\">{`A`}</inlineCode>{` over and over, and result in an infinite nested tree of declaration\nreferences. The intended behavior is to have the first back-reference stored\nelsewhere in the generated output and let it reference itself, making the\nruntime a lazy-evaluated sequence of getters.`}</p>\n    <h2 {...{\n      \"id\": \"indexed-access-type-with-generics\"\n    }}>{`Indexed access type with generics`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface StandardInterface {\n    prop: string;\n}\n\ninterface WithKeyGeneric<U extends keyof StandardInterface> {\n    test(): StandardInterface[U];\n}\n\nconst type = createMock<WithKeyGeneric<'prop'>>();\n\nexpect(type.test()).toBe(''); // it will be null\n`}</code></pre>\n    <p>{`These are discussed here:\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Typescript-TDD/ts-auto-mock/issues/201\"\n      }}>{`link`}</a>{`.\nIndexed access type it's a though feature to handle correctly.\nThere are few difference scenarios:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`From MappedTypes`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`type Test = {[key in keyof A]: A[key]};\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`From Generics -> example above`}</li>\n      <li parentName=\"ul\">{`From literal`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface StandardInterface {\n    prop: string;\n}\n\ntype Hello = StandardInterface['prop'];\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}