(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{sLzK:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return i})),n.d(t,"default",(function(){return b}));var o=n("k0FJ"),a=n("oedh"),r=n("/FXl"),c=n("TjRS"),i=(n("aD51"),{});void 0!==i&&i&&i===Object(i)&&Object.isExtensible(i)&&!i.hasOwnProperty("__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/views/create-hydrated-mock.mdx"}});var s={_frontmatter:i},l=c.a;function b(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.b)(l,Object(o.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"create-hydrated-mock"},"Create hydrated mock"),Object(r.b)("p",null,"Do you need to mock ",Object(r.b)("strong",{parentName:"p"},"optional")," properties or union types that may be undefined? ",Object(r.b)("br",null),"\nSay hello to ",Object(r.b)("strong",{parentName:"p"},"createHydratedMock"),", it will help you create mocks that will treat optional interfaces as they were not optional"),Object(r.b)("p",null,"We currently support optional token (?) and union types that contains undefined."),Object(r.b)("h2",{id:"optional-interfaces"},"Optional interfaces"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts"}),"import { createHydratedMock } from 'ts-auto-mock';\n\ninterface Person {\n  id?: string;\n  details?: {\n      phone?: number\n  }\n}\nconst mock = createHydratedMock<Person>();\nmock.id // \"\"\nmock.details // { phone: 0 }\n")),Object(r.b)("h2",{id:"union-types"},"Union types"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts"}),"import { createHydratedMock } from 'ts-auto-mock';\n\ninterface Person {\n  getName(): string | undefined;\n  getSurname(): undefined | string;\n}\nconst mock = createHydratedMock<Person>();\nmock.getName() // ''\nmock.getSurname() // ''\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"note-from-the-team"},"Note from the team"),Object(r.b)("p",null,"We completely understand the need of this functionality, but we would like the usage to be much simpler.  ",Object(r.b)("br",null),"\nWe would like to use the existing createMock in combination of typescript Required interface"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts"}),"import { createMock } from 'ts-auto-mock';\n\ninterface Person {\n  id?: string;\n}\ntype Required<T> = { // from typescript lib\n    [P in keyof T]-?: T[P];\n};\nconst mock = createMock<Required<Person>>();\nmock.id // \"\"\n")),Object(r.b)("p",null,"Unfortunately this doesn't work because we don't fully support map types."))}void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/views/create-hydrated-mock.mdx"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-views-create-hydrated-mock-mdx-262369e500efe8e834e3.js.map