(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{eLSI:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return c})),n.d(t,"default",(function(){return s}));var a=n("k0FJ"),l=n("oedh"),b=n("/FXl"),r=n("TjRS"),c=(n("aD51"),{});void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/views/config.md"}});var o={_frontmatter:c},i=r.a;function s(e){var t=e.components,n=Object(l.a)(e,["components"]);return Object(b.b)(i,Object(a.a)({},o,n,{components:t,mdxType:"MDXLayout"}),Object(b.b)("h1",{id:"config"},"Config"),Object(b.b)("pre",null,Object(b.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"interface TsAutoMockOptions {\n    debug: boolean | 'file' | 'console';\n    cacheBetweenTests: boolean;\n    features: TsAutoMockFeaturesOption[];\n}\n\nexport type TsAutoMockFeaturesOption = 'random';\n\n")),Object(b.b)("p",null,"options:"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Value"),Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"),Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Default"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"debug")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"false")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"it will NOT log to the console"),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null})),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"true")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"it will log to the console"),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null})),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"file")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"it will log to a file (tsAutoMock.log)"),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null})),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"console")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"alias for ",Object(b.b)("inlineCode",{parentName:"td"},"true")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"cacheBetweenTests")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"true")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"it will reuse mocks between different tests"),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"true")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null})),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"false")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"it create new mocks for each different tests"),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"features")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"feature[]")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"it will enable a specific feature"),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"[]")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"files")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"`string"),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"string[]`"),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"it will include only the files matched")))),Object(b.b)("hr",null),Object(b.b)("p",null,"There are different ways to pass options to a transformer, every installation type has its own way, to know how to do it\nfind your configuration in the ",Object(b.b)("a",Object(a.a)({parentName:"p"},{href:"./installation"}),"Installation page"),"."),Object(b.b)("h2",{id:"debug"},"Debug"),Object(b.b)("p",null,"We currently support:"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"Logs for ",Object(b.b)("a",Object(a.a)({parentName:"li"},{href:"./types-not-supported"}),"not supported types"))),Object(b.b)("p",null,"It will log any not supported type automatically converted to null.\nThis is useful to report an issue or to investigate a potential bug."),Object(b.b)("hr",null),Object(b.b)("h2",{id:"cachebetweentests"},"CacheBetweenTests"),Object(b.b)("p",null,"One of the main functionality of ts auto mock is to generate mocks and cache them."),Object(b.b)("p",null,"Mocks are currently created in the test file making tests to depend to each other."),Object(b.b)("p",null,"Example:"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"test1.test.ts has a createMock of Interface."),Object(b.b)("li",{parentName:"ul"},"test2.test.ts has a createMock of Interface."),Object(b.b)("li",{parentName:"ul"},"test1.test.ts will have the registration of Interface mock"),Object(b.b)("li",{parentName:"ul"},"test2.test.ts will have a registration import.")),Object(b.b)("p",null,"If test2 run in a different context than test1 it will not be able to access to the same mock."),Object(b.b)("p",null,"Set this property to false when your test run in different context."),Object(b.b)("p",null,"We are working on an ",Object(b.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/Typescript-TDD/ts-auto-mock/issues/101"}),"issue")," to make sure tests do not depend to each other but they will still take advance of a cache system"),Object(b.b)("hr",null),Object(b.b)("h2",{id:"features"},"Features"),Object(b.b)("p",null,"We currently support the following features"),Object(b.b)("h3",{id:"random-random"},"Random ('random')"),Object(b.b)("p",null,"When adding random to the feature list any string, boolean and number will be transformed to a random values"),Object(b.b)("h4",{id:"string"},"String"),Object(b.b)("p",null,"Example"),Object(b.b)("pre",null,Object(b.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"interface WithString {\n    prop: string;\n}\n\ncreateMock<WithString>() // { prop: 'propQsdeos'}\n")),Object(b.b)("p",null,"The name of the property will be prepended following 6 random character"),Object(b.b)("h3",{id:"number"},"Number"),Object(b.b)("p",null,"Example"),Object(b.b)("pre",null,Object(b.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"interface WithNumber {\n    prop: number;\n}\n\ncreateMock<WithNumber>() // { prop: 5000.213123}\n")),Object(b.b)("p",null,"A random number will be generated between -10000 and 10000"),Object(b.b)("h3",{id:"boolean"},"Boolean"),Object(b.b)("p",null,"Example"),Object(b.b)("pre",null,Object(b.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"interface WithBoolean {\n    prop: boolean;\n}\n\ncreateMock<WithBoolean>() // { prop: true|false}\n")),Object(b.b)("p",null,"true|false will be random"),Object(b.b)("hr",null),Object(b.b)("h2",{id:"files"},"Files"),Object(b.b)("p",null,"To reduce the compilation time you can tell to the transformer the files that contain ",Object(b.b)("inlineCode",{parentName:"p"},"createMock"),", ",Object(b.b)("inlineCode",{parentName:"p"},"createMockValue")," and ",Object(b.b)("inlineCode",{parentName:"p"},"registerMock"),",\nall the other files are going to be ignored by the transformer."),Object(b.b)("p",null,"The value of this configuration is a ",Object(b.b)("inlineCode",{parentName:"p"},"glob")," or array of ",Object(b.b)("inlineCode",{parentName:"p"},"glob"),", the same type of matcher present in ",Object(b.b)("inlineCode",{parentName:"p"},"tsconfig")," when\ndefining ",Object(b.b)("inlineCode",{parentName:"p"},"include"),", ",Object(b.b)("inlineCode",{parentName:"p"},"exclude")," and ",Object(b.b)("inlineCode",{parentName:"p"},"files")," properties."),Object(b.b)("p",null,"Examples of usage:"),Object(b.b)("pre",null,Object(b.b)("code",Object(a.a)({parentName:"pre"},{}),'files: "**/*.spec.ts"                       \n\n| Structure                                    | Included?\n| -------------------------------------------- | ---------\n| root                                         |\n| └── Projects                                 |\n|     └── SuperProject                         |\n|         ├── tests                            |\n|         │   └── feature1                     |\n|         │       ├── supporting.mock.ts       | No\n|         │       ├── supportingInterface.ts   | No\n|         │       ├── feature1.spec.ts         | Yes\n|         │       └── feature1.spec.ts         | Yes\n|         └── src                              |\n|             └── feature1                     |\n|                 ├── myClass.model.ts         | No\n|                 ├── myClass.api.mock.ts      | No\n|                 ├── model.interface.ts       | No\n|                 └── feature1.component.ts    | No\n')),Object(b.b)("pre",null,Object(b.b)("code",Object(a.a)({parentName:"pre"},{}),'files: ["**/tests/**/*.spec.ts", "**/tests/**/*.mock.ts"]\n\n| Structure                                    | Included?\n| -------------------------------------------- | ---------\n| root                                         |\n| └── Projects                                 |\n|     └── SuperProject                         |\n|         ├── tests                            |\n|         │   └── feature1                     |\n|         │       ├── supporting.mock.ts       | Yes\n|         │       ├── supportingInterface.ts   | No\n|         │       ├── feature1.spec.ts         | Yes\n|         │       └── feature1.spec.ts         | Yes\n|         └── src                              |\n|             └── feature1                     |\n|                 ├── myClass.model.ts         | No\n|                 ├── myClass.api.mock.ts      | No\n|                 ├── model.interface.ts       | No\n|                 └── feature1.component.ts    | No\n')))}void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/views/config.md"}}),s.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-views-config-md-0cb38c3a078b1ffab061.js.map