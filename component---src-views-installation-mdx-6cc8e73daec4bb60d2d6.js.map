{"version":3,"sources":["webpack:///../src/views/installation.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"2eAMO,IAAMA,EAAe,Q,4MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,gBADR,gBAGA,wEAAuD,0BAAYC,WAAW,KAAvB,gBAAvD,iCACA,4IACA,qBAAG,mBAAGA,WAAW,KAAQ,CACrB,KAAQ,yDADT,6BAAH,KAGA,+HACA,iBAAQ,CACN,GAAM,8BACL,0BAAYA,WAAW,MAAvB,QAFH,MAE2D,0BAAYA,WAAW,MAAvB,WAF3D,MAEsH,0BAAYA,WAAW,MAAvB,gBACtH,sBACE,kBAAIA,WAAW,MAAf,6BAEF,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,qFAEL,yCAAwB,0BAAYA,WAAW,KAAvB,eAAxB,mFACA,iBAAQ,CACN,MAAS,GAET,kBAAIA,WAAW,MAAf,+BAAoD,0BAAYA,WAAW,MAAvB,mBAEtD,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,mMAeL,sBACE,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,mBAAuC,0BAAYA,WAAW,KAAvB,qBAAvC,OAA4G,0BAAYA,WAAW,KAAvB,SAA5G,4GAEF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,+BAAmD,mBAAGA,WAAW,KAAQ,CACrE,KAAQ,+GADuC,WAKvD,iBAAQ,CACN,MAAS,GAET,kBAAIA,WAAW,MAAf,OAA4B,0BAAYA,WAAW,MAAvB,WAA5B,sDAEF,iBAAQ,CACN,GAAM,oDACL,sBAAQA,WAAW,MAAK,0BAAYA,WAAW,UAAvB,gBAAxB,MAA4F,0BAAYA,WAAW,UAAvB,kBAA5F,iBAA6K,0BAAYA,WAAW,UAAvB,QAA7K,YACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,0FAUL,sBACE,kBAAIA,WAAW,MAAf,+BAAoD,mBAAGA,WAAW,MAAS,CACvE,KAAQ,8GADwC,UAItD,iBAAQ,CACN,MAAS,GAET,kBAAIA,WAAW,MAAf,OAA4B,0BAAYA,WAAW,MAAvB,eAA5B,kBAAuG,0BAAYA,WAAW,MAAvB,WAAvG,cAEF,iBAAQ,CACN,GAAM,sDACL,sBAAQA,WAAW,MAAK,0BAAYA,WAAW,UAAvB,gBAAxB,MAA4F,0BAAYA,WAAW,UAAvB,kBAA5F,iBAA6K,0BAAYA,WAAW,UAAvB,QAA7K,YACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,0HAYL,sBACE,kBAAIA,WAAW,MAAf,+BAAoD,mBAAGA,WAAW,MAAS,CACvE,KAAQ,8GADwC,UAItD,iBAAQ,CACN,MAAS,GAET,kBAAIA,WAAW,MAAf,OAA4B,0BAAYA,WAAW,MAAvB,qBAA5B,oCAEF,iBAAQ,CACN,GAAM,sDACL,sBAAQA,WAAW,MAAK,0BAAYA,WAAW,UAAvB,gBAAxB,MAA4F,0BAAYA,WAAW,UAAvB,kBAA5F,iBAA6K,0BAAYA,WAAW,UAAvB,QAA7K,YACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,yFAUL,iBAAQ,CACN,GAAM,YACL,sBAAQA,WAAW,MAAK,0BAAYA,WAAW,UAAvB,eAC3B,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,kCAIL,qBAAG,mBAAGA,WAAW,KAAQ,CACrB,KAAQ,2GADT,YAGH,iBAAQ,CACN,MAAS,GAET,kBAAIA,WAAW,MAAf,2BAEF,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,6SAsBL,iBAAQ,CACN,MAAS,GAET,kBAAIA,WAAW,MAAf,kBAEF,iBAAQ,CACN,GAAM,eACL,sBAAQA,WAAW,MAAK,0BAAYA,WAAW,UAAvB,kBAC3B,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,0EAUL,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,mBAEL,kDACA,iBAAQ,CACN,GAAM,WADR,WAGA,wHAAuG,0BAAYA,WAAW,KAAvB,6BAAvG,OAAoL,0BAAYA,WAAW,KAAvB,aAApL,KACA,iBAAQ,CACN,GAAM,mBACL,sBAAQA,WAAW,MAAK,0BAAYA,WAAW,UAAvB,uBAC3B,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,gcAuBL,iBAAQ,CACN,GAAM,eADR,eAGA,4BAAW,mBAAGA,WAAW,KAAQ,CAC7B,KAAQ,+DADD,wBAAX,yBAGA,iBAAQ,CACN,GAAM,gBACL,sBAAQA,WAAW,MAAK,0BAAYA,WAAW,UAAvB,mBAC3B,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,0IAYL,iBAAQ,CACN,GAAM,YADR,YAGA,4BAAW,mBAAGA,WAAW,KAAQ,CAC7B,KAAQ,6DADD,sBAGX,sDACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,uCAGL,sCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,0IAYL,iBAAQ,CACN,GAAM,WADR,WAGA,iBAAQ,CACN,GAAM,SADR,SAGA,iBAAQ,CACN,GAAM,YACL,sBAAQA,WAAW,MAAK,0BAAYA,WAAW,UAAvB,eAC3B,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,wNAYL,8DAA6C,0BAAYA,WAAW,KAAvB,aAA7C,0CACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,sF,mMAMTJ,EAAWK,gBAAiB","file":"component---src-views-installation-mdx-6cc8e73daec4bb60d2d6.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/ts-auto-mock/ts-auto-mock/ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h1>\n    <p>{`To make this library work you need to apply the `}<inlineCode parentName=\"p\">{`ts-auto-mock`}</inlineCode>{` transformer at compile time.`}</p>\n    <p>{`Unfortunately, TypeScript itself does not currently provide any easy way to use custom transformers out of the box.`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Microsoft/TypeScript/issues/14419\"\n      }}>{`See this TypeScript issue`}</a>{`.`}</p>\n    <p>{`There are different ways to do this depending on how you are currently compiling your TypeScript files`}</p>\n    <h2 {...{\n      \"id\": \"jest--ts-jest--ttypescript\"\n    }}><inlineCode parentName=\"h2\">{`jest`}</inlineCode>{` + `}<inlineCode parentName=\"h2\">{`ts-jest`}</inlineCode>{` + `}<inlineCode parentName=\"h2\">{`ttypescript`}</inlineCode></h2>\n    <ol>\n      <li parentName=\"ol\">{`Install the dependencies`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{}}>{`npm install jest ts-jest typescript ttypescript jest-ts-auto-mock ts-auto-mock\n`}</code></pre>\n    <p>{`you need to have `}<inlineCode parentName=\"p\">{`ttypescript`}</inlineCode>{` installed to patch and enable the TypeScript-runtime to apply the transformer.`}</p>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`Add the transformer to your `}<inlineCode parentName=\"li\">{`tsconfig.json`}</inlineCode></li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`  ...\n  \"compilerOptions\": {\n    ...\n    \"plugins\": [\n      {\n        \"transform\": \"ts-auto-mock/transformer\",\n        \"cacheBetweenTests\": false\n      }\n    ]\n    ...\n  }\n  ...\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Remember to set `}<inlineCode parentName=\"p\">{`cacheBetweenTests`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{` because Jest runs tests in parallel and ts-auto-mock doesn't yet support caching across parallel tests`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`You can find a JSON example `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/Typescript-TDD/jest-ts-auto-mock/blob/master/examples/ts-jest-ttypescript/tsconfig.json\"\n          }}>{`here`}</a></p>\n      </li>\n    </ul>\n    <ol {...{\n      \"start\": 3\n    }}>\n      <li parentName=\"ol\">{`Add `}<inlineCode parentName=\"li\">{`ts-jest`}</inlineCode>{` to the transformation pattern in the Jest config`}</li>\n    </ol>\n    <h4 {...{\n      \"id\": \"packagejson--jestconfigjs-without-the-jest-scope\"\n    }}><strong parentName=\"h4\"><inlineCode parentName=\"strong\">{`package.json`}</inlineCode>{` / `}<inlineCode parentName=\"strong\">{`jest.config.js`}</inlineCode>{` (without the `}<inlineCode parentName=\"strong\">{`jest`}</inlineCode>{` scope)`}</strong></h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`...\n  \"jest\": {\n    \"transform\": {\n      \".(ts|tsx)\": \"ts-jest\"\n    }\n  }\n...\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`You can find a JSON example `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/Typescript-TDD/jest-ts-auto-mock/blob/master/examples/ts-jest-ttypescript/package.json\"\n        }}>{`here`}</a></li>\n    </ul>\n    <ol {...{\n      \"start\": 4\n    }}>\n      <li parentName=\"ol\">{`Add `}<inlineCode parentName=\"li\">{`ttypescript`}</inlineCode>{` to be used as `}<inlineCode parentName=\"li\">{`ts-jest`}</inlineCode>{` compiler`}</li>\n    </ol>\n    <h4 {...{\n      \"id\": \"packagejson--jestconfigjs-without-the-jest-scope-1\"\n    }}><strong parentName=\"h4\"><inlineCode parentName=\"strong\">{`package.json`}</inlineCode>{` / `}<inlineCode parentName=\"strong\">{`jest.config.js`}</inlineCode>{` (without the `}<inlineCode parentName=\"strong\">{`jest`}</inlineCode>{` scope)`}</strong></h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`...\n  \"jest\": {\n    \"globals\": {\n      \"ts-jest\": {\n        \"compiler\": \"ttypescript\"\n      }\n    }\n  }\n...\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`You can find a JSON example `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/Typescript-TDD/jest-ts-auto-mock/blob/master/examples/ts-jest-ttypescript/package.json\"\n        }}>{`here`}</a></li>\n    </ul>\n    <ol {...{\n      \"start\": 5\n    }}>\n      <li parentName=\"ol\">{`Add `}<inlineCode parentName=\"li\">{`jest-ts-auto-mock`}</inlineCode>{` config file as your setup file`}</li>\n    </ol>\n    <h4 {...{\n      \"id\": \"packagejson--jestconfigjs-without-the-jest-scope-2\"\n    }}><strong parentName=\"h4\"><inlineCode parentName=\"strong\">{`package.json`}</inlineCode>{` / `}<inlineCode parentName=\"strong\">{`jest.config.js`}</inlineCode>{` (without the `}<inlineCode parentName=\"strong\">{`jest`}</inlineCode>{` scope)`}</strong></h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`...\n  \"jest\": {\n    \"setupFiles\": [\n      \"<rootDir>config.ts\"\n    ]\n  }\n...\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"configts\"\n    }}><strong parentName=\"h4\"><inlineCode parentName=\"strong\">{`config.ts`}</inlineCode></strong></h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import 'jest-ts-auto-mock';\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Typescript-TDD/jest-ts-auto-mock/blob/master/examples/ts-jest-ttypescript/config.ts\"\n      }}>{`Example`}</a></p>\n    <ol {...{\n      \"start\": 6\n    }}>\n      <li parentName=\"ol\">{`Create your first test`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createMock } from 'ts-auto-mock';\n\ninterface Interface {\n  a: string;\n  b: number;\n}\n\ndescribe('reuse', () => {\n  let mock: Interface;\n\n  beforeEach(() => {\n    mock = createMock<Interface>();\n  });\n\n  it('should work', () => {\n    expect(mock.a).toBe('');\n  });\n});\n\n`}</code></pre>\n    <ol {...{\n      \"start\": 7\n    }}>\n      <li parentName=\"ol\">{`Run your test`}</li>\n    </ol>\n    <h4 {...{\n      \"id\": \"packagejson\"\n    }}><strong parentName=\"h4\"><inlineCode parentName=\"strong\">{`package.json`}</inlineCode></strong></h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`...\n  \"scripts\": {\n    ...\n    \"test\": \"jest\"\n    ...\n  }\n...\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`npm run test\n`}</code></pre>\n    <p>{`... and you are all done!`}</p>\n    <h2 {...{\n      \"id\": \"webpack\"\n    }}>{`Webpack`}</h2>\n    <p>{`With Webpack, You can use any TypeScript-related loader that supports custom transformers, e.g. `}<inlineCode parentName=\"p\">{`awesome-typescript-loader`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`ts-loader`}</inlineCode>{`:`}</p>\n    <h4 {...{\n      \"id\": \"webpackconfigjs\"\n    }}><strong parentName=\"h4\"><inlineCode parentName=\"strong\">{`webpack.config.js`}</inlineCode></strong></h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const tsAutoMockTransformer = require('ts-auto-mock/transformer').default;\n\nmodule.exports = {\n  // ...\n  module: {\n    rules: [\n      {\n        test: /\\\\.ts$/,\n        loader: 'ts-loader', // or 'awesome-typescript-loader'\n        options: {\n          getCustomTransformers: program => ({\n              before: [\n                  tsAutoMockTransformer(program)\n              ]\n          })\n        }\n      }\n    ]\n  }\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"ttypescript\"\n    }}>{`ttypescript`}</h2>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/cevek/ttypescript/blob/master/README.md\"\n      }}>{`ttypescript's README`}</a>{` for more information`}</p>\n    <h4 {...{\n      \"id\": \"tsconfigjson\"\n    }}><strong parentName=\"h4\"><inlineCode parentName=\"strong\">{`tsconfig.json`}</inlineCode></strong></h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"compilerOptions\": {\n    //...,\n    \"plugins\": [\n      { \"transform\": \"ts-auto-mock/transformer\" }\n    ]\n  },\n  //...\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"ts-patch\"\n    }}>{`ts-patch`}</h2>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/nonara/ts-patch/blob/master/README.md\"\n      }}>{`ts-patch's README`}</a></p>\n    <p>{`Command to run to install it:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`npm i ts-patch\nts-patch install\n`}</code></pre>\n    <p>{`tsconfig.json`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"compilerOptions\": {\n    //...,\n    \"plugins\": [\n      { \"transform\": \"ts-auto-mock/transformer\" }\n    ]\n  },\n  //...\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"ts-node\"\n    }}>{`ts-node`}</h2>\n    <h3 {...{\n      \"id\": \"mocha\"\n    }}>{`Mocha`}</h3>\n    <h4 {...{\n      \"id\": \"tsnodejs\"\n    }}><strong parentName=\"h4\"><inlineCode parentName=\"strong\">{`tsnode.js`}</inlineCode></strong></h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const tsAutoMockTransformer = require('ts-auto-mock/transformer').default;\n\nrequire('ts-node').register({\n  transformers: program => ({\n    before: [\n      tsAutoMockTransformer(program)\n    ]\n  })\n});\n`}</code></pre>\n    <p>{`Then inject the registration with the `}<inlineCode parentName=\"p\">{`--require`}</inlineCode>{` flag that Mocha passes on to Node.js:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`mocha --require './tsnode.js' --watch-extensions ts,tsx \"test/**/*.{ts,tsx}\"\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}