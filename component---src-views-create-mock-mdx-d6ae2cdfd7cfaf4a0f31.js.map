{"version":3,"sources":["webpack:///../src/views/create-mock.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"2OAMaA,G,UAAe,S,2MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,eADR,eAGA,uBAAK,gCAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,gQAgBL,iBAAQ,CACN,GAAM,sBADR,sBAGA,yGACA,0HACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,+TAsBL,iBAAQ,CACN,GAAM,uCADR,uCAGA,6QAEA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,urB,yMAiCTJ,EAAWK,gBAAiB","file":"component---src-views-create-mock-mdx-d6ae2cdfd7cfaf4a0f31.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/ts-auto-mock/ts-auto-mock/ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"create-mock\"\n    }}>{`Create mock`}</h1>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createMock } from 'ts-auto-mock';\n\ninterface Person {\n  id: string;\n  getName(): string;\n  details: {\n      phone: number\n  }\n}\nconst mock = createMock<Person>();\nmock.id // \"\"\nmock.getName() // \"\"\nmock.details // { phone: 0 }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"property-overrides\"\n    }}>{`Property overrides`}</h2>\n    <p>{`If you desire, you may override the otherwise mocked properties of an interface.`}</p>\n    <p>{`You don't have to provide the entire interface, just a partial object of the one you are mocking.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createMock } from 'ts-auto-mock';\n\ninterface Person {\n  id: string;\n  getName(): string;\n  details: {\n    phone: number\n  }\n}\n\nconst mock = createMock<Person>({\n    details: {\n      phone: 7423232323\n    }\n});\n\nmock.id // \"\"\nmock.getName() // \"\"\nmock.details // { phone: 7423232323 }\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"override-with-created-mock-as-value\"\n    }}>{`Override with created mock as value`}</h3>\n    <p>{`If a mock is used as a value in the override object the mock will be entirely assigned and not merged. This is done to\navoid issues with recursive mocks. Surely this won't be a problem for anyone but it's worth writing it in the documentation.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createMock } from 'ts-auto-mock';\n\ninterface Person {\n  id: string;\n}\n\ninterface PersonParent {\n  child: Person;\n}\n\nconst personMock = createMock<Person>();\nconst parentMock = createMock<PersonParent>({\n    child: personMock\n});\n\nparentMock.child === personMock // true\n\nconst personMock2 = createMock<Person>();\ndelete personMock2.id;\nconst parentMock2 = createMock<PersonParent>({\n    child: personMock2\n});\n\nparentMock2.child === personMock2 // true\nparentMock2.child.id // undefined, even if \\`id\\` was not in the override object (personMock2) it still did override\n                     // because the entire \\`personMock2\\` was assigned to \\`child\\`\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}