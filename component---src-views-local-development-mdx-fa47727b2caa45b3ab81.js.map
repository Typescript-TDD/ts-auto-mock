{"version":3,"sources":["webpack:///../src/views/local-development.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"4OAMaA,G,UAAe,S,iNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,qBADR,qBAGA,6EAA4D,0BAAYC,WAAW,KAAvB,gBAA5D,gCACA,iBAAQ,CACN,GAAM,iBADR,iBAGA,sBACE,kBAAIA,WAAW,MAAf,iBACA,kBAAIA,WAAW,MAAf,OACA,kBAAIA,WAAW,MAAf,8BAEF,iBAAQ,CACN,GAAM,8BADR,8BAGA,qEACA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,kBAEL,iBAAQ,CACN,GAAM,yBADR,yBAGA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,oBAEL,iBAAQ,CACN,GAAM,iBADR,iBAGA,qBAAG,0BAAYA,WAAW,KAAvB,gBAAH,uJACA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,gBACpB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,eACpB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,cACpB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,WAEtB,4DACA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,gCAEL,0DACA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,4BAEL,iBAAQ,CACN,GAAM,qBADR,qBAGA,4EACA,sBACE,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,gCACA,kBAAIA,WAAW,MACb,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,eAEF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,qBACA,mBAAKA,WAAW,MAAK,gCAAMA,WAAW,OAAU,IAA3B,kGAM3B,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,sBACA,kBAAIA,WAAW,MACb,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,iBAAqC,6BAAGA,WAAW,KAAQ,CACvD,KAAQ,kGADyB,wBAIvC,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,sBAEF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,4CACA,mBAAKA,WAAW,MAAK,gCAAMA,WAAW,OAAU,IAA3B,+BAGvB,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,wEAA4F,0BAAYA,WAAW,KAAvB,sBAA5F,SACA,mBAAKA,WAAW,MAAK,gCAAMA,WAAW,OAAU,IAA3B,mCAM7B,yC,+MAKJJ,EAAWK,gBAAiB","file":"component---src-views-local-development-mdx-fa47727b2caa45b3ab81.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/ts-auto-mock/ts-auto-mock/ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"local-development\"\n    }}>{`Local development`}</h1>\n    <p>{`If you want to add new functionality or fix a bug in `}<inlineCode parentName=\"p\">{`ts-auto-mock`}</inlineCode>{` you are in the right place.`}</p>\n    <h2 {...{\n      \"id\": \"prerequisites\"\n    }}>{`Prerequisites`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Node.js >= 10`}</li>\n      <li parentName=\"ul\">{`NPM`}</li>\n      <li parentName=\"ul\">{`A local clone of the repo`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"install-local-dependencies\"\n    }}>{`Install local dependencies`}</h2>\n    <p>{`Make sure you are in the project root folder`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`npm install\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"build-the-transformer\"\n    }}>{`Build the transformer`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`npm run build\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"make-a-change\"\n    }}>{`Make a change`}</h2>\n    <p><inlineCode parentName=\"p\">{`ts-auto-mock`}</inlineCode>{` consists of multiple modules, each of them has a different meaning and depending on what you are editing you can re-build each module individually`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`transformer`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`repository`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`extension`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`merge`}</inlineCode></li>\n    </ul>\n    <p>{`If you are editing the transformer:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`npm run build:transformer\n`}</code></pre>\n    <p>{`If you are editing anything else:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`npm run build:modules\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"test-your-changes\"\n    }}>{`Test your changes`}</h2>\n    <p>{`There are 2 ways to test the effect of your changes`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Use the existing test system`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Add a test`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Run all the tests`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`npm run test\n// or use npm run test:transformer if you are just editing the transformer\n`}</code></pre>\n          </li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Use the playground`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Open the file `}<a parentName=\"p\" {...{\n                \"href\": \"https://github.com/Typescript-TDD/ts-auto-mock/blob/master/test/playground/playground.test.ts\"\n              }}>{`playground.test.ts`}</a></p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Make your changes`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Run test playground to see the test pass`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`npm run test:playground\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Run build playground to see the emitted JS code in the corresponding `}<inlineCode parentName=\"p\">{`playground.test.js`}</inlineCode>{`-file`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`npm run build:playground\n`}</code></pre>\n          </li>\n        </ul>\n      </li>\n    </ul>\n    <p>{`That's it.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}