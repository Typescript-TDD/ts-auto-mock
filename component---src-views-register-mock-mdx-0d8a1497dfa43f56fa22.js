(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{FVCx:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return s})),n.d(t,"default",(function(){return b}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk");var r=n("/FXl"),o=n("TjRS");n("aD51");function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var s={};void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/views/register-mock.mdx"}});var c={_frontmatter:s},i=o.a;function b(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,["components"]);return Object(r.b)(i,a({},c,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"register-mock"},"Register mock"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"registerMock")," will register your custom mock that will be re-used automatically whenever another mock is identified as converting the same interface."),Object(r.b)("h4",{id:"personts"},Object(r.b)("strong",{parentName:"h4"},Object(r.b)("inlineCode",{parentName:"strong"},"./person.ts"))),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-ts"}),"export interface Person {\n  id: string;\n}\n")),Object(r.b)("h4",{id:"person-fakets"},Object(r.b)("strong",{parentName:"h4"},Object(r.b)("inlineCode",{parentName:"strong"},"./person-fake.ts"))),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-ts"}),'import { Person } from \'./person\';\n\nexport class PersonFake extends Person {\n  public id: string;\n  public name: string;\n\n  constructor() {\n    this.id = "Basic Id";\n    this.name = "Basic name";\n  }\n}\n')),Object(r.b)("h4",{id:"contextts"},Object(r.b)("strong",{parentName:"h4"},Object(r.b)("inlineCode",{parentName:"strong"},"./context.ts"))),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-ts",metastring:"context.ts","context.ts":!0}),"import { registerMock } from 'ts-auto-mock';\nimport { Person } from './person';\nimport { PersonFake } from './person-fake';\n\nregisterMock<Person>(() => new PersonFake());\n")),Object(r.b)("h4",{id:"my-testts"},Object(r.b)("strong",{parentName:"h4"},Object(r.b)("inlineCode",{parentName:"strong"},"./my-test.ts"))),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-ts"}),'interface Wrapper {\n  person: Person;\n}\n\nconst mock: Wrapper = createMock<Wrapper>();\nmock.person // PersonFake\nmock.person.id // "Basic Id"\nmock.person.name // "Basic name"\n')),Object(r.b)("p",null,"When injecting fake (/stubbed) implementations, we recommend using the ",Object(r.b)("a",a({parentName:"p"},{href:"./extension"}),"extension strategy")," to retrieve the faked object."),Object(r.b)("p",null,"An example of usage for Promise->FakePromise can be found in ",Object(r.b)("a",a({parentName:"p"},{href:"https://github.com/Typescript-TDD/ts-auto-mock/blob/master/test/registerMock/extensionStrategy/extensionStrategy.test.ts"}),"the test folder"),"."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Note:")," You can only use it in a common file (webpack context.ts, mocha tsnode.js, etc), using ",Object(r.b)("inlineCode",{parentName:"p"},"registerMock")," in other files will give unexpected results."))}b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/views/register-mock.mdx"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-views-register-mock-mdx-0d8a1497dfa43f56fa22.js.map