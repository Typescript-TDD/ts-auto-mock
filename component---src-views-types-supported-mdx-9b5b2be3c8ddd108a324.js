(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{Fb1g:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return s})),t.d(n,"default",(function(){return b}));t("5hJT"),t("W1QL"),t("K/PF"),t("t91x"),t("75LO"),t("PJhk");var c=t("/FXl"),a=t("TjRS");t("aD51");function r(){return(r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var c in t)Object.prototype.hasOwnProperty.call(t,c)&&(e[c]=t[c])}return e}).apply(this,arguments)}var s={};void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/views/types-supported.mdx"}});var o={_frontmatter:s},i=a.a;function b(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,c,a={},r=Object.keys(e);for(c=0;c<r.length;c++)t=r[c],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,["components"]);return Object(c.b)(i,r({},o,t,{components:n,mdxType:"MDXLayout"}),Object(c.b)("h1",{id:"types-supported"},"Types supported"),Object(c.b)("p",null,"The library tries to convert the type argument passed to createMock so you don't have to mock them manually."),Object(c.b)("h2",{id:"primitive"},"Primitive"),Object(c.b)("pre",null,Object(c.b)("code",r({parentName:"pre"},{className:"language-ts"}),'number // 0\nstring // ""\nboolean // false\nboolean[] // []\nvoid // undefined\nnull // null\nundefined // undefined\nnever // undefined\n')),Object(c.b)("h2",{id:"interfaces"},"Interfaces"),Object(c.b)("pre",null,Object(c.b)("code",r({parentName:"pre"},{className:"language-ts"}),'interface Person {\n  id: string\n  name: string\n}\n/*\n{\n  id: "",\n  name: ""\n}\n*/\n')),Object(c.b)("h2",{id:"interfaces-with-call-signatures"},"Interfaces with call signatures"),Object(c.b)("p",null,"For overload methods it will use the first one"),Object(c.b)("pre",null,Object(c.b)("code",r({parentName:"pre"},{className:"language-ts"}),'interface Person {\n  (): number\n  (): string\n  name: string\n}\n\nconst mock = createMock<Person>();\nmock() // 0\nmock.name // ""\n')),Object(c.b)("h2",{id:"interfaces-with-construct-signatures"},"Interfaces with construct signatures"),Object(c.b)("p",null,"For overload constructors it will use the first one"),Object(c.b)("pre",null,Object(c.b)("code",r({parentName:"pre"},{className:"language-ts"}),'interface PersonWithHat {\n  hatSize: number;\n}\n\ninterface PersonWithoutHat {\n  shirtSize: number;\n}\n\ninterface Person {\n  new (hatSize: number): PersonWithHat\n  new (): PersonWithoutHat\n  name: string\n}\n\nconst mock = createMock<Person>();\nnew mock() // { hatSize: 0 }\nmock.name // ""\n')),Object(c.b)("h2",{id:"classes"},"Classes"),Object(c.b)("pre",null,Object(c.b)("code",r({parentName:"pre"},{className:"language-ts"}),'class Person {\n  private _id: string;\n  name: string\n}\n/*\n{\n  name: ""\n}\n*/\n')),Object(c.b)("h2",{id:"methods"},"Methods"),Object(c.b)("pre",null,Object(c.b)("code",r({parentName:"pre"},{className:"language-ts"}),'interface InterfaceWithMethod {\n  method(): string\n}\n/*\n{\n  method: () => {\n    return ""\n  }\n}\n*/\n')),Object(c.b)("h2",{id:"literal"},"Literal"),Object(c.b)("pre",null,Object(c.b)("code",r({parentName:"pre"},{className:"language-ts"}),'type Data = {\n  id: "I am a specific string",\n  number: 2\n}\n/*\n{\n  id: "I am a specific string",\n  number: 2\n}\n/*\n')),Object(c.b)("h2",{id:"enum-it-will-select-the-first-value"},"Enum (it will select the first value)"),Object(c.b)("pre",null,Object(c.b)("code",r({parentName:"pre"},{className:"language-ts"}),"enum Direction {\n  LEFT,\n  RIGHT\n}\n\ninterface WithEnum {\n  direction: Direction\n}\n/*\n{\n  direction: DIRECTION.LEFT\n}\n/*\n")),Object(c.b)("h2",{id:"function"},"Function"),Object(c.b)("pre",null,Object(c.b)("code",r({parentName:"pre"},{className:"language-ts"}),'const mock = createMock<() => string>();\nmock // () => ""\n')),Object(c.b)("h2",{id:"object"},"Object"),Object(c.b)("pre",null,Object(c.b)("code",r({parentName:"pre"},{className:"language-ts"}),'const mock = createMock<{ a: string }>();\nmock // { a: "" }\n')),Object(c.b)("h2",{id:"key-in"},"Key in"),Object(c.b)("pre",null,Object(c.b)("code",r({parentName:"pre"},{className:"language-ts"}),'type Keys = "a" | "b";\ntype myType = { [key in Keys]: string }\nconst mock = createMock<myType>();\nmock // { a: "", b: "" }\n')),Object(c.b)("h2",{id:"key-in-keyof"},"Key in keyof"),Object(c.b)("pre",null,Object(c.b)("code",r({parentName:"pre"},{className:"language-ts"}),'type Keys = {\n    a: number;\n}\ntype keyInKeyof = { [key in keyof Keys]: string }\nconst mock = createMock<keyInKeyof>();\nmock // { a: "" }\n')),Object(c.b)("h2",{id:"optional"},"Optional"),Object(c.b)("pre",null,Object(c.b)("code",r({parentName:"pre"},{className:"language-ts"}),"class MyClass {\n    test?: string;\n}\nconst mock = createMock<MyClass>();\nmock // { test: undefined }\n")),Object(c.b)("h2",{id:"typescript-libraries-array-number-ecc"},"Typescript libraries (Array, Number... ecc)"),Object(c.b)("p",null,"This is a special case. The library tries to convert to the most useful type."),Object(c.b)("pre",null,Object(c.b)("code",r({parentName:"pre"},{className:"language-ts"}),'class MyClass {\n  array: Array<number>; // []\n  number: Number; // 0\n  promise: Promise<string>; // a promise that will resolve an empty string Promise.resolve("")\n  map: Map<string, string>; // new Map()\n  set: Set<string>; // new Set()\n}\n')),Object(c.b)("h2",{id:"tuple"},"Tuple"),Object(c.b)("pre",null,Object(c.b)("code",r({parentName:"pre"},{className:"language-ts"}),"class MyClass {\n  tuple: [string, number];\n}\n\nconst mock = createMock<MyClass>();\nmock // { tuple: ['', 0] }\n")),Object(c.b)("h2",{id:"union-it-will-convert-to-the-first-type"},"Union (it will convert to the first type)"),Object(c.b)("pre",null,Object(c.b)("code",r({parentName:"pre"},{className:"language-ts"}),'class MyClass {\n  union: string | number;\n}\n\nconst mock = createMock<MyClass>();\nmock // { union: "" }\n')),Object(c.b)("h2",{id:"dictionary"},"Dictionary"),Object(c.b)("pre",null,Object(c.b)("code",r({parentName:"pre"},{className:"language-ts"}),"type Dictionary<T> = {\n  [key: string]: T;\n}\n\nconst mock = createMock<Dictionary<Interface>>();\nmock // {}\n")),Object(c.b)("h2",{id:"extends"},"Extends"),Object(c.b)("pre",null,Object(c.b)("code",r({parentName:"pre"},{className:"language-ts"}),'interface Keys {\n  a: string;\n}\ninterface Interface extends Keys {\n  b: boolean;\n}\n\nconst mock = createMock<Interface>();\nmock // { a: "", b: "" }\n')),Object(c.b)("h2",{id:"generics"},"Generics"),Object(c.b)("pre",null,Object(c.b)("code",r({parentName:"pre"},{className:"language-ts"}),'interface WithGeneric<T>{\n  generic: T\n}\n\nconst mock = createMock<WithGeneric<string>>();\nmock // { generic: "" }\n')),Object(c.b)("h2",{id:"intersection"},"Intersection"),Object(c.b)("pre",null,Object(c.b)("code",r({parentName:"pre"},{className:"language-ts"}),'interface IntersectionA {\n  a: string;\n}\n\ninterface IntersectionB {\n  b: number;\n}\n\ninterface Interface {\n  intersection: IntersectionA & IntersectionB,\n}\n\nconst mock = createMock<Interface>();\nmock // { intersection: { a: "", b: 0 } }\n')),Object(c.b)("h2",{id:"constructortype"},"ConstructorType"),Object(c.b)("pre",null,Object(c.b)("code",r({parentName:"pre"},{className:"language-ts"}),'interface Test {\n  a: string;\n}\nconst mockType = createMock<new () => Test>();\nconst mock = new mockType();\n\nmock = // { a: "" }\n')),Object(c.b)("h2",{id:"typequery"},"TypeQuery"),Object(c.b)("pre",null,Object(c.b)("code",r({parentName:"pre"},{className:"language-ts"}),"enum AnEnum {\n  a,\n  b = 'something',\n}\n\nconst mock = createMock<typeof AnEnum>();\nmock.a // 0\nmock.b // 'something'\nmock[0] // 'a'\n\nclass AClass {\n  a: string\n}\n\nconst mockClass = createMock<typeof AClass>();\nnew mockClass().a // ''\n\nfunction AFunction(): number;\n\nconst mockFunction = createMock<typeof AFunction>();\nmockFunction() // 0\n")),Object(c.b)("h2",{id:"indexedaccesstype"},"IndexedAccessType"),Object(c.b)("pre",null,Object(c.b)("code",r({parentName:"pre"},{className:"language-ts"}),"class Class {\n  a: string\n}\n\ntype KeyOf = { [key in keyof Class]: Class[key] };\nconst mock = createMock<KeyOf>();\nmock.a // ''\n")))}b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/views/types-supported.mdx"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-views-types-supported-mdx-9b5b2be3c8ddd108a324.js.map