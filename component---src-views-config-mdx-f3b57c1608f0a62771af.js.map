{"version":3,"sources":["webpack:///../src/views/config.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-views-config-mdx-f3b57c1608f0a62771af.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/ts-auto-mock/ts-auto-mock/ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"config\"\n    }}>{`Config`}</h1>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`tsAutoMockTransformer(program: ts.Program, options: TsAutoMockOptions)\n\ninterface TsAutoMockOptions {\n    debug: boolean | 'file' | 'console';\n    cacheBetweenTests: boolean;\n    features: TsAutoMockFeaturesOption[];\n}\n\nexport type TsAutoMockFeaturesOption = 'random';\n\n`}</code></pre>\n    <p>{`options:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Value`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Default`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`debug`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`false`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`it will NOT log to the console`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`true`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`it will log to the console`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`file`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`it will log to a file (tsAutoMock.log)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`console`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`alias for `}<inlineCode parentName=\"td\">{`true`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`cacheBetweenTests`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`true`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`it will reuse mocks between different tests`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`true`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`false`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`it create new mocks for each different tests`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`features`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`feature[]`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`it will enable a specific feature`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`[]`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"debug\"\n    }}>{`Debug`}</h2>\n    <p>{`We currently support:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Logs for `}<a parentName=\"li\" {...{\n          \"href\": \"./types-not-supported\"\n        }}>{`not supported types`}</a></li>\n    </ul>\n    <p>{`It will log any not supported type automatically converted to null.`}</p>\n    <h2 {...{\n      \"id\": \"this-is-useful-to-report-an-issue-or-to-investigate-a-potential-bug\"\n    }}>{`This is useful to report an issue or to investigate a potential bug.`}</h2>\n    <h2 {...{\n      \"id\": \"cachebetweentests\"\n    }}>{`CacheBetweenTests`}</h2>\n    <p>{`One of the main functionality of ts auto mock is to generate mocks and cache them.`}</p>\n    <p>{`Mocks are currently created in the test file making tests to depend to each other.`}</p>\n    <p>{`Example:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`test1.test.ts has a createMock of Interface.`}</li>\n      <li parentName=\"ul\">{`test2.test.ts has a createMock of Interface.`}</li>\n      <li parentName=\"ul\">{`test1.test.ts will have the registration of Interface mock`}</li>\n      <li parentName=\"ul\">{`test2.test.ts will have a registration import.`}</li>\n    </ul>\n    <p>{`If test2 run in a different context than test1 it will not be able to access to the same mock.`}</p>\n    <p>{`Set this property to false when your test run in different context.`}</p>\n    <p>{`We are working on an `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Typescript-TDD/ts-auto-mock/issues/101\"\n      }}>{`issue`}</a>{` to make sure tests do not depend to each other but they will still take advance of a cache system`}</p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"features\"\n    }}>{`Features`}</h2>\n    <p>{`We currently support the following features`}</p>\n    <h3 {...{\n      \"id\": \"random-random\"\n    }}>{`Random ('random')`}</h3>\n    <p>{`When adding random to the feature list any string, boolean and number will be transformed to a random values`}</p>\n    <h4 {...{\n      \"id\": \"string\"\n    }}>{`String`}</h4>\n    <p>{`Example`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface WithString {\n    prop: string;\n}\n\ncreateMock<WithString>() // { prop: 'propQsdeos'}\n`}</code></pre>\n    <p>{`The name of the property will be prepended following 6 random character`}</p>\n    <h3 {...{\n      \"id\": \"number\"\n    }}>{`Number`}</h3>\n    <p>{`Example`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface WithNumber {\n    prop: number;\n}\n\ncreateMock<WithNumber>() // { prop: 5000.213123}\n`}</code></pre>\n    <p>{`A random number will be generated between -10000 and 10000`}</p>\n    <h3 {...{\n      \"id\": \"boolean\"\n    }}>{`Boolean`}</h3>\n    <p>{`Example`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface WithBoolean {\n    prop: boolean;\n}\n\ncreateMock<WithBoolean>() // { prop: true|false}\n`}</code></pre>\n    <p>{`true|false will be random`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}